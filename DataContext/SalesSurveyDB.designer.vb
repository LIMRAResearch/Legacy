'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18408
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="DataSource")>  _
Partial Public Class SalesSurveyDBDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertadmGroup(instance As admGroup)
    End Sub
  Partial Private Sub UpdateadmGroup(instance As admGroup)
    End Sub
  Partial Private Sub DeleteadmGroup(instance As admGroup)
    End Sub
  Partial Private Sub InsertadmUser(instance As admUser)
    End Sub
  Partial Private Sub UpdateadmUser(instance As admUser)
    End Sub
  Partial Private Sub DeleteadmUser(instance As admUser)
    End Sub
  Partial Private Sub InsertadmUserGroup(instance As admUserGroup)
    End Sub
  Partial Private Sub UpdateadmUserGroup(instance As admUserGroup)
    End Sub
  Partial Private Sub DeleteadmUserGroup(instance As admUserGroup)
    End Sub
  Partial Private Sub InsertadmUserSurvey(instance As admUserSurvey)
    End Sub
  Partial Private Sub UpdateadmUserSurvey(instance As admUserSurvey)
    End Sub
  Partial Private Sub DeleteadmUserSurvey(instance As admUserSurvey)
    End Sub
  Partial Private Sub InsertddDataType(instance As ddDataType)
    End Sub
  Partial Private Sub UpdateddDataType(instance As ddDataType)
    End Sub
  Partial Private Sub DeleteddDataType(instance As ddDataType)
    End Sub
  Partial Private Sub InsertdSurveySeries(instance As dSurveySeries)
    End Sub
  Partial Private Sub UpdatedSurveySeries(instance As dSurveySeries)
    End Sub
  Partial Private Sub DeletedSurveySeries(instance As dSurveySeries)
    End Sub
  Partial Private Sub InsertfData(instance As fData)
    End Sub
  Partial Private Sub UpdatefData(instance As fData)
    End Sub
  Partial Private Sub DeletefData(instance As fData)
    End Sub
  Partial Private Sub InsertrExtractData(instance As rExtractData)
    End Sub
  Partial Private Sub UpdaterExtractData(instance As rExtractData)
    End Sub
  Partial Private Sub DeleterExtractData(instance As rExtractData)
    End Sub
  Partial Private Sub InsertTestData(instance As TestData)
    End Sub
  Partial Private Sub UpdateTestData(instance As TestData)
    End Sub
  Partial Private Sub DeleteTestData(instance As TestData)
    End Sub
  Partial Private Sub InsertdOrgMaster(instance As dOrgMaster)
    End Sub
  Partial Private Sub UpdatedOrgMaster(instance As dOrgMaster)
    End Sub
  Partial Private Sub DeletedOrgMaster(instance As dOrgMaster)
    End Sub
  Partial Private Sub InsertdGroup(instance As dGroup)
    End Sub
  Partial Private Sub UpdatedGroup(instance As dGroup)
    End Sub
  Partial Private Sub DeletedGroup(instance As dGroup)
    End Sub
  Partial Private Sub InsertddExceptionSet(instance As ddExceptionSet)
    End Sub
  Partial Private Sub UpdateddExceptionSet(instance As ddExceptionSet)
    End Sub
  Partial Private Sub DeleteddExceptionSet(instance As ddExceptionSet)
    End Sub
  Partial Private Sub InsertddMetric(instance As ddMetric)
    End Sub
  Partial Private Sub UpdateddMetric(instance As ddMetric)
    End Sub
  Partial Private Sub DeleteddMetric(instance As ddMetric)
    End Sub
  Partial Private Sub InsertddScale(instance As ddScale)
    End Sub
  Partial Private Sub UpdateddScale(instance As ddScale)
    End Sub
  Partial Private Sub DeleteddScale(instance As ddScale)
    End Sub
  Partial Private Sub InsertddUnit(instance As ddUnit)
    End Sub
  Partial Private Sub UpdateddUnit(instance As ddUnit)
    End Sub
  Partial Private Sub DeleteddUnit(instance As ddUnit)
    End Sub
  Partial Private Sub InsertddCodeSet(instance As ddCodeSet)
    End Sub
  Partial Private Sub UpdateddCodeSet(instance As ddCodeSet)
    End Sub
  Partial Private Sub DeleteddCodeSet(instance As ddCodeSet)
    End Sub
  Partial Private Sub InsertddCode(instance As ddCode)
    End Sub
  Partial Private Sub UpdateddCode(instance As ddCode)
    End Sub
  Partial Private Sub DeleteddCode(instance As ddCode)
    End Sub
  Partial Private Sub InsertddcField(instance As ddcField)
    End Sub
  Partial Private Sub UpdateddcField(instance As ddcField)
    End Sub
  Partial Private Sub DeleteddcField(instance As ddcField)
    End Sub
  Partial Private Sub InsertddField(instance As ddField)
    End Sub
  Partial Private Sub UpdateddField(instance As ddField)
    End Sub
  Partial Private Sub DeleteddField(instance As ddField)
    End Sub
  Partial Private Sub InsertcPCYA(instance As cPCYA)
    End Sub
  Partial Private Sub UpdatecPCYA(instance As cPCYA)
    End Sub
  Partial Private Sub DeletecPCYA(instance As cPCYA)
    End Sub
  Partial Private Sub InsertcPYTD(instance As cPYTD)
    End Sub
  Partial Private Sub UpdatecPYTD(instance As cPYTD)
    End Sub
  Partial Private Sub DeletecPYTD(instance As cPYTD)
    End Sub
  Partial Private Sub InsertcYTD(instance As cYTD)
    End Sub
  Partial Private Sub UpdatecYTD(instance As cYTD)
    End Sub
  Partial Private Sub DeletecYTD(instance As cYTD)
    End Sub
  Partial Private Sub InsertccYTD(instance As ccYTD)
    End Sub
  Partial Private Sub UpdateccYTD(instance As ccYTD)
    End Sub
  Partial Private Sub DeleteccYTD(instance As ccYTD)
    End Sub
  Partial Private Sub InsertccPYTD(instance As ccPYTD)
    End Sub
  Partial Private Sub UpdateccPYTD(instance As ccPYTD)
    End Sub
  Partial Private Sub DeleteccPYTD(instance As ccPYTD)
    End Sub
  Partial Private Sub InsertccPCYA(instance As ccPCYA)
    End Sub
  Partial Private Sub UpdateccPCYA(instance As ccPCYA)
    End Sub
  Partial Private Sub DeleteccPCYA(instance As ccPCYA)
    End Sub
  Partial Private Sub InsertcData(instance As cData)
    End Sub
  Partial Private Sub UpdatecData(instance As cData)
    End Sub
  Partial Private Sub DeletecData(instance As cData)
    End Sub
  Partial Private Sub InsertddAlgorithm(instance As ddAlgorithm)
    End Sub
  Partial Private Sub UpdateddAlgorithm(instance As ddAlgorithm)
    End Sub
  Partial Private Sub DeleteddAlgorithm(instance As ddAlgorithm)
    End Sub
  Partial Private Sub InsertddAttribute(instance As ddAttribute)
    End Sub
  Partial Private Sub UpdateddAttribute(instance As ddAttribute)
    End Sub
  Partial Private Sub DeleteddAttribute(instance As ddAttribute)
    End Sub
  Partial Private Sub InsertdWorkbook(instance As dWorkbook)
    End Sub
  Partial Private Sub UpdatedWorkbook(instance As dWorkbook)
    End Sub
  Partial Private Sub DeletedWorkbook(instance As dWorkbook)
    End Sub
  Partial Private Sub InsertdSource(instance As dSource)
    End Sub
  Partial Private Sub UpdatedSource(instance As dSource)
    End Sub
  Partial Private Sub DeletedSource(instance As dSource)
    End Sub
  Partial Private Sub InsertdSurvey(instance As dSurvey)
    End Sub
  Partial Private Sub UpdatedSurvey(instance As dSurvey)
    End Sub
  Partial Private Sub DeletedSurvey(instance As dSurvey)
    End Sub
  Partial Private Sub InsertfPage(instance As fPage)
    End Sub
  Partial Private Sub UpdatefPage(instance As fPage)
    End Sub
  Partial Private Sub DeletefPage(instance As fPage)
    End Sub
  Partial Private Sub InsertfRow(instance As fRow)
    End Sub
  Partial Private Sub UpdatefRow(instance As fRow)
    End Sub
  Partial Private Sub DeletefRow(instance As fRow)
    End Sub
  Partial Private Sub InsertfSection(instance As fSection)
    End Sub
  Partial Private Sub UpdatefSection(instance As fSection)
    End Sub
  Partial Private Sub DeletefSection(instance As fSection)
    End Sub
  Partial Private Sub InsertfColumn(instance As fColumn)
    End Sub
  Partial Private Sub UpdatefColumn(instance As fColumn)
    End Sub
  Partial Private Sub DeletefColumn(instance As fColumn)
    End Sub
  Partial Private Sub InsertfLayout(instance As fLayout)
    End Sub
  Partial Private Sub UpdatefLayout(instance As fLayout)
    End Sub
  Partial Private Sub DeletefLayout(instance As fLayout)
    End Sub
  Partial Private Sub InsertImportDetail(instance As ImportDetail)
    End Sub
  Partial Private Sub UpdateImportDetail(instance As ImportDetail)
    End Sub
  Partial Private Sub DeleteImportDetail(instance As ImportDetail)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("SalesSurveysConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property admGroups() As System.Data.Linq.Table(Of admGroup)
		Get
			Return Me.GetTable(Of admGroup)
		End Get
	End Property
	
	Public ReadOnly Property admUsers() As System.Data.Linq.Table(Of admUser)
		Get
			Return Me.GetTable(Of admUser)
		End Get
	End Property
	
	Public ReadOnly Property admUserGroups() As System.Data.Linq.Table(Of admUserGroup)
		Get
			Return Me.GetTable(Of admUserGroup)
		End Get
	End Property
	
	Public ReadOnly Property admUserSurveys() As System.Data.Linq.Table(Of admUserSurvey)
		Get
			Return Me.GetTable(Of admUserSurvey)
		End Get
	End Property
	
	Public ReadOnly Property ddDataTypes() As System.Data.Linq.Table(Of ddDataType)
		Get
			Return Me.GetTable(Of ddDataType)
		End Get
	End Property
	
	Public ReadOnly Property dSurveySeries() As System.Data.Linq.Table(Of dSurveySeries)
		Get
			Return Me.GetTable(Of dSurveySeries)
		End Get
	End Property
	
	Public ReadOnly Property fDatas() As System.Data.Linq.Table(Of fData)
		Get
			Return Me.GetTable(Of fData)
		End Get
	End Property
	
	Public ReadOnly Property rExtractDatas() As System.Data.Linq.Table(Of rExtractData)
		Get
			Return Me.GetTable(Of rExtractData)
		End Get
	End Property
	
	Public ReadOnly Property TestDatas() As System.Data.Linq.Table(Of TestData)
		Get
			Return Me.GetTable(Of TestData)
		End Get
	End Property
	
	Public ReadOnly Property dOrgMasters() As System.Data.Linq.Table(Of dOrgMaster)
		Get
			Return Me.GetTable(Of dOrgMaster)
		End Get
	End Property
	
	Public ReadOnly Property dFrequencies() As System.Data.Linq.Table(Of dFrequency)
		Get
			Return Me.GetTable(Of dFrequency)
		End Get
	End Property
	
	Public ReadOnly Property dGroups() As System.Data.Linq.Table(Of dGroup)
		Get
			Return Me.GetTable(Of dGroup)
		End Get
	End Property
	
	Public ReadOnly Property ddExceptionSets() As System.Data.Linq.Table(Of ddExceptionSet)
		Get
			Return Me.GetTable(Of ddExceptionSet)
		End Get
	End Property
	
	Public ReadOnly Property ddMetrics() As System.Data.Linq.Table(Of ddMetric)
		Get
			Return Me.GetTable(Of ddMetric)
		End Get
	End Property
	
	Public ReadOnly Property ddScales() As System.Data.Linq.Table(Of ddScale)
		Get
			Return Me.GetTable(Of ddScale)
		End Get
	End Property
	
	Public ReadOnly Property ddUnits() As System.Data.Linq.Table(Of ddUnit)
		Get
			Return Me.GetTable(Of ddUnit)
		End Get
	End Property
	
	Public ReadOnly Property ddCodeSets() As System.Data.Linq.Table(Of ddCodeSet)
		Get
			Return Me.GetTable(Of ddCodeSet)
		End Get
	End Property
	
	Public ReadOnly Property ddCodes() As System.Data.Linq.Table(Of ddCode)
		Get
			Return Me.GetTable(Of ddCode)
		End Get
	End Property
	
	Public ReadOnly Property ddcFields() As System.Data.Linq.Table(Of ddcField)
		Get
			Return Me.GetTable(Of ddcField)
		End Get
	End Property
	
	Public ReadOnly Property ddFields() As System.Data.Linq.Table(Of ddField)
		Get
			Return Me.GetTable(Of ddField)
		End Get
	End Property
	
	Public ReadOnly Property cPCYAs() As System.Data.Linq.Table(Of cPCYA)
		Get
			Return Me.GetTable(Of cPCYA)
		End Get
	End Property
	
	Public ReadOnly Property cPYTDs() As System.Data.Linq.Table(Of cPYTD)
		Get
			Return Me.GetTable(Of cPYTD)
		End Get
	End Property
	
	Public ReadOnly Property cYTDs() As System.Data.Linq.Table(Of cYTD)
		Get
			Return Me.GetTable(Of cYTD)
		End Get
	End Property
	
	Public ReadOnly Property ccYTDs() As System.Data.Linq.Table(Of ccYTD)
		Get
			Return Me.GetTable(Of ccYTD)
		End Get
	End Property
	
	Public ReadOnly Property ccPYTDs() As System.Data.Linq.Table(Of ccPYTD)
		Get
			Return Me.GetTable(Of ccPYTD)
		End Get
	End Property
	
	Public ReadOnly Property ccPCYAs() As System.Data.Linq.Table(Of ccPCYA)
		Get
			Return Me.GetTable(Of ccPCYA)
		End Get
	End Property
	
	Public ReadOnly Property cDatas() As System.Data.Linq.Table(Of cData)
		Get
			Return Me.GetTable(Of cData)
		End Get
	End Property
	
	Public ReadOnly Property ddAlgorithms() As System.Data.Linq.Table(Of ddAlgorithm)
		Get
			Return Me.GetTable(Of ddAlgorithm)
		End Get
	End Property
	
	Public ReadOnly Property ddAttributes() As System.Data.Linq.Table(Of ddAttribute)
		Get
			Return Me.GetTable(Of ddAttribute)
		End Get
	End Property
	
	Public ReadOnly Property dWorkbooks() As System.Data.Linq.Table(Of dWorkbook)
		Get
			Return Me.GetTable(Of dWorkbook)
		End Get
	End Property
	
	Public ReadOnly Property dSources() As System.Data.Linq.Table(Of dSource)
		Get
			Return Me.GetTable(Of dSource)
		End Get
	End Property
	
	Public ReadOnly Property dSurveys() As System.Data.Linq.Table(Of dSurvey)
		Get
			Return Me.GetTable(Of dSurvey)
		End Get
	End Property
	
	Public ReadOnly Property fPages() As System.Data.Linq.Table(Of fPage)
		Get
			Return Me.GetTable(Of fPage)
		End Get
	End Property
	
	Public ReadOnly Property fRows() As System.Data.Linq.Table(Of fRow)
		Get
			Return Me.GetTable(Of fRow)
		End Get
	End Property
	
	Public ReadOnly Property fSections() As System.Data.Linq.Table(Of fSection)
		Get
			Return Me.GetTable(Of fSection)
		End Get
	End Property
	
	Public ReadOnly Property fColumns() As System.Data.Linq.Table(Of fColumn)
		Get
			Return Me.GetTable(Of fColumn)
		End Get
	End Property
	
	Public ReadOnly Property fLayouts() As System.Data.Linq.Table(Of fLayout)
		Get
			Return Me.GetTable(Of fLayout)
		End Get
	End Property
	
	Public ReadOnly Property ImportDetails() As System.Data.Linq.Table(Of ImportDetail)
		Get
			Return Me.GetTable(Of ImportDetail)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.admGroup")>  _
Partial Public Class admGroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GroupID As Integer
	
	Private _GroupName As String
	
	Private _GroupDescription As String
	
	Private _admUserGroups As EntitySet(Of admUserGroup)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGroupIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnGroupIDChanged()
    End Sub
    Partial Private Sub OnGroupNameChanging(value As String)
    End Sub
    Partial Private Sub OnGroupNameChanged()
    End Sub
    Partial Private Sub OnGroupDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnGroupDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._admUserGroups = New EntitySet(Of admUserGroup)(AddressOf Me.attach_admUserGroups, AddressOf Me.detach_admUserGroups)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property GroupID() As Integer
		Get
			Return Me._GroupID
		End Get
		Set
			If ((Me._GroupID = value)  _
						= false) Then
				Me.OnGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._GroupID = value
				Me.SendPropertyChanged("GroupID")
				Me.OnGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupName", DbType:="VarChar(100)")>  _
	Public Property GroupName() As String
		Get
			Return Me._GroupName
		End Get
		Set
			If (String.Equals(Me._GroupName, value) = false) Then
				Me.OnGroupNameChanging(value)
				Me.SendPropertyChanging
				Me._GroupName = value
				Me.SendPropertyChanged("GroupName")
				Me.OnGroupNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupDescription", DbType:="VarChar(50)")>  _
	Public Property GroupDescription() As String
		Get
			Return Me._GroupDescription
		End Get
		Set
			If (String.Equals(Me._GroupDescription, value) = false) Then
				Me.OnGroupDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._GroupDescription = value
				Me.SendPropertyChanged("GroupDescription")
				Me.OnGroupDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="admGroup_admUserGroup", Storage:="_admUserGroups", ThisKey:="GroupID", OtherKey:="GroupID")>  _
	Public Property admUserGroups() As EntitySet(Of admUserGroup)
		Get
			Return Me._admUserGroups
		End Get
		Set
			Me._admUserGroups.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_admUserGroups(ByVal entity As admUserGroup)
		Me.SendPropertyChanging
		entity.admGroup = Me
	End Sub
	
	Private Sub detach_admUserGroups(ByVal entity As admUserGroup)
		Me.SendPropertyChanging
		entity.admGroup = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.admUser")>  _
Partial Public Class admUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OnyxID As Integer
	
	Private _LoginID As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _Password As String
	
	Private _Email As String
	
	Private _admUserGroups As EntitySet(Of admUserGroup)
	
	Private _admUserSurveys As EntitySet(Of admUserSurvey)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOnyxIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOnyxIDChanged()
    End Sub
    Partial Private Sub OnLoginIDChanging(value As String)
    End Sub
    Partial Private Sub OnLoginIDChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._admUserGroups = New EntitySet(Of admUserGroup)(AddressOf Me.attach_admUserGroups, AddressOf Me.detach_admUserGroups)
		Me._admUserSurveys = New EntitySet(Of admUserSurvey)(AddressOf Me.attach_admUserSurveys, AddressOf Me.detach_admUserSurveys)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OnyxID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property OnyxID() As Integer
		Get
			Return Me._OnyxID
		End Get
		Set
			If ((Me._OnyxID = value)  _
						= false) Then
				Me.OnOnyxIDChanging(value)
				Me.SendPropertyChanging
				Me._OnyxID = value
				Me.SendPropertyChanged("OnyxID")
				Me.OnOnyxIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoginID", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property LoginID() As String
		Get
			Return Me._LoginID
		End Get
		Set
			If (String.Equals(Me._LoginID, value) = false) Then
				Me.OnLoginIDChanging(value)
				Me.SendPropertyChanging
				Me._LoginID = value
				Me.SendPropertyChanged("LoginID")
				Me.OnLoginIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="VarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="VarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(100)")>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(150)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="admUser_admUserGroup", Storage:="_admUserGroups", ThisKey:="OnyxID", OtherKey:="OnyxID")>  _
	Public Property admUserGroups() As EntitySet(Of admUserGroup)
		Get
			Return Me._admUserGroups
		End Get
		Set
			Me._admUserGroups.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="admUser_admUserSurvey", Storage:="_admUserSurveys", ThisKey:="OnyxID", OtherKey:="OnyxID")>  _
	Public Property admUserSurveys() As EntitySet(Of admUserSurvey)
		Get
			Return Me._admUserSurveys
		End Get
		Set
			Me._admUserSurveys.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_admUserGroups(ByVal entity As admUserGroup)
		Me.SendPropertyChanging
		entity.admUser = Me
	End Sub
	
	Private Sub detach_admUserGroups(ByVal entity As admUserGroup)
		Me.SendPropertyChanging
		entity.admUser = Nothing
	End Sub
	
	Private Sub attach_admUserSurveys(ByVal entity As admUserSurvey)
		Me.SendPropertyChanging
		entity.admUser = Me
	End Sub
	
	Private Sub detach_admUserSurveys(ByVal entity As admUserSurvey)
		Me.SendPropertyChanging
		entity.admUser = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.admUserGroup")>  _
Partial Public Class admUserGroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserGroupID As Integer
	
	Private _GroupID As Integer
	
	Private _OnyxID As System.Nullable(Of Integer)
	
	Private _admGroup As EntityRef(Of admGroup)
	
	Private _admUser As EntityRef(Of admUser)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserGroupIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserGroupIDChanged()
    End Sub
    Partial Private Sub OnGroupIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnGroupIDChanged()
    End Sub
    Partial Private Sub OnOnyxIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOnyxIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._admGroup = CType(Nothing, EntityRef(Of admGroup))
		Me._admUser = CType(Nothing, EntityRef(Of admUser))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserGroupID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UserGroupID() As Integer
		Get
			Return Me._UserGroupID
		End Get
		Set
			If ((Me._UserGroupID = value)  _
						= false) Then
				Me.OnUserGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._UserGroupID = value
				Me.SendPropertyChanged("UserGroupID")
				Me.OnUserGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupID", DbType:="Int NOT NULL")>  _
	Public Property GroupID() As Integer
		Get
			Return Me._GroupID
		End Get
		Set
			If ((Me._GroupID = value)  _
						= false) Then
				If Me._admGroup.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._GroupID = value
				Me.SendPropertyChanged("GroupID")
				Me.OnGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OnyxID", DbType:="Int")>  _
	Public Property OnyxID() As System.Nullable(Of Integer)
		Get
			Return Me._OnyxID
		End Get
		Set
			If (Me._OnyxID.Equals(value) = false) Then
				If Me._admUser.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOnyxIDChanging(value)
				Me.SendPropertyChanging
				Me._OnyxID = value
				Me.SendPropertyChanged("OnyxID")
				Me.OnOnyxIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="admGroup_admUserGroup", Storage:="_admGroup", ThisKey:="GroupID", OtherKey:="GroupID", IsForeignKey:=true)>  _
	Public Property admGroup() As admGroup
		Get
			Return Me._admGroup.Entity
		End Get
		Set
			Dim previousValue As admGroup = Me._admGroup.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._admGroup.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._admGroup.Entity = Nothing
					previousValue.admUserGroups.Remove(Me)
				End If
				Me._admGroup.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.admUserGroups.Add(Me)
					Me._GroupID = value.GroupID
				Else
					Me._GroupID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("admGroup")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="admUser_admUserGroup", Storage:="_admUser", ThisKey:="OnyxID", OtherKey:="OnyxID", IsForeignKey:=true)>  _
	Public Property admUser() As admUser
		Get
			Return Me._admUser.Entity
		End Get
		Set
			Dim previousValue As admUser = Me._admUser.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._admUser.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._admUser.Entity = Nothing
					previousValue.admUserGroups.Remove(Me)
				End If
				Me._admUser.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.admUserGroups.Add(Me)
					Me._OnyxID = value.OnyxID
				Else
					Me._OnyxID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("admUser")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.admUserSurvey")>  _
Partial Public Class admUserSurvey
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserSurveyID As Integer
	
	Private _OnyxID As Integer
	
	Private _SurveyID As Integer
	
	Private _admUser As EntityRef(Of admUser)
	
	Private _dSurvey As EntityRef(Of dSurvey)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserSurveyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserSurveyIDChanged()
    End Sub
    Partial Private Sub OnOnyxIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOnyxIDChanged()
    End Sub
    Partial Private Sub OnSurveyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveyIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._admUser = CType(Nothing, EntityRef(Of admUser))
		Me._dSurvey = CType(Nothing, EntityRef(Of dSurvey))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserSurveyID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UserSurveyID() As Integer
		Get
			Return Me._UserSurveyID
		End Get
		Set
			If ((Me._UserSurveyID = value)  _
						= false) Then
				Me.OnUserSurveyIDChanging(value)
				Me.SendPropertyChanging
				Me._UserSurveyID = value
				Me.SendPropertyChanged("UserSurveyID")
				Me.OnUserSurveyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OnyxID", DbType:="Int NOT NULL")>  _
	Public Property OnyxID() As Integer
		Get
			Return Me._OnyxID
		End Get
		Set
			If ((Me._OnyxID = value)  _
						= false) Then
				If Me._admUser.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOnyxIDChanging(value)
				Me.SendPropertyChanging
				Me._OnyxID = value
				Me.SendPropertyChanged("OnyxID")
				Me.OnOnyxIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyID", DbType:="Int NOT NULL")>  _
	Public Property SurveyID() As Integer
		Get
			Return Me._SurveyID
		End Get
		Set
			If ((Me._SurveyID = value)  _
						= false) Then
				If Me._dSurvey.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSurveyIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveyID = value
				Me.SendPropertyChanged("SurveyID")
				Me.OnSurveyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="admUser_admUserSurvey", Storage:="_admUser", ThisKey:="OnyxID", OtherKey:="OnyxID", IsForeignKey:=true)>  _
	Public Property admUser() As admUser
		Get
			Return Me._admUser.Entity
		End Get
		Set
			Dim previousValue As admUser = Me._admUser.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._admUser.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._admUser.Entity = Nothing
					previousValue.admUserSurveys.Remove(Me)
				End If
				Me._admUser.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.admUserSurveys.Add(Me)
					Me._OnyxID = value.OnyxID
				Else
					Me._OnyxID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("admUser")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSurvey_admUserSurvey", Storage:="_dSurvey", ThisKey:="SurveyID", OtherKey:="SurveyID", IsForeignKey:=true)>  _
	Public Property dSurvey() As dSurvey
		Get
			Return Me._dSurvey.Entity
		End Get
		Set
			Dim previousValue As dSurvey = Me._dSurvey.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._dSurvey.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._dSurvey.Entity = Nothing
					previousValue.admUserSurveys.Remove(Me)
				End If
				Me._dSurvey.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.admUserSurveys.Add(Me)
					Me._SurveyID = value.SurveyID
				Else
					Me._SurveyID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("dSurvey")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ddDataTypes")>  _
Partial Public Class ddDataType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DataTypeID As Integer
	
	Private _DataType As String
	
	Private _vbConstant As String
	
	Private _Description As String
	
	Private _ddFields As EntitySet(Of ddField)
	
	Private _fLayouts As EntitySet(Of fLayout)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDataTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDataTypeIDChanged()
    End Sub
    Partial Private Sub OnDataTypeChanging(value As String)
    End Sub
    Partial Private Sub OnDataTypeChanged()
    End Sub
    Partial Private Sub OnvbConstantChanging(value As String)
    End Sub
    Partial Private Sub OnvbConstantChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ddFields = New EntitySet(Of ddField)(AddressOf Me.attach_ddFields, AddressOf Me.detach_ddFields)
		Me._fLayouts = New EntitySet(Of fLayout)(AddressOf Me.attach_fLayouts, AddressOf Me.detach_fLayouts)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataTypeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DataTypeID() As Integer
		Get
			Return Me._DataTypeID
		End Get
		Set
			If ((Me._DataTypeID = value)  _
						= false) Then
				Me.OnDataTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._DataTypeID = value
				Me.SendPropertyChanged("DataTypeID")
				Me.OnDataTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataType", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DataType() As String
		Get
			Return Me._DataType
		End Get
		Set
			If (String.Equals(Me._DataType, value) = false) Then
				Me.OnDataTypeChanging(value)
				Me.SendPropertyChanging
				Me._DataType = value
				Me.SendPropertyChanged("DataType")
				Me.OnDataTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vbConstant", DbType:="NVarChar(12)")>  _
	Public Property vbConstant() As String
		Get
			Return Me._vbConstant
		End Get
		Set
			If (String.Equals(Me._vbConstant, value) = false) Then
				Me.OnvbConstantChanging(value)
				Me.SendPropertyChanging
				Me._vbConstant = value
				Me.SendPropertyChanged("vbConstant")
				Me.OnvbConstantChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(50)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddDataType_ddField", Storage:="_ddFields", ThisKey:="DataTypeID", OtherKey:="DataTypeID")>  _
	Public Property ddFields() As EntitySet(Of ddField)
		Get
			Return Me._ddFields
		End Get
		Set
			Me._ddFields.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddDataType_fLayout", Storage:="_fLayouts", ThisKey:="DataTypeID", OtherKey:="DataTypeID")>  _
	Public Property fLayouts() As EntitySet(Of fLayout)
		Get
			Return Me._fLayouts
		End Get
		Set
			Me._fLayouts.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ddFields(ByVal entity As ddField)
		Me.SendPropertyChanging
		entity.ddDataType = Me
	End Sub
	
	Private Sub detach_ddFields(ByVal entity As ddField)
		Me.SendPropertyChanging
		entity.ddDataType = Nothing
	End Sub
	
	Private Sub attach_fLayouts(ByVal entity As fLayout)
		Me.SendPropertyChanging
		entity.ddDataType = Me
	End Sub
	
	Private Sub detach_fLayouts(ByVal entity As fLayout)
		Me.SendPropertyChanging
		entity.ddDataType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.dSurveySeries")>  _
Partial Public Class dSurveySeries
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SurveySeriesID As Integer
	
	Private _SurveyID As Integer
	
	Private _DateID As Date
	
	Private _Year As Integer
	
	Private _Quarter As Integer
	
	Private _fDatas As EntitySet(Of fData)
	
	Private _cPCYAs As EntitySet(Of cPCYA)
	
	Private _cPYTDs As EntitySet(Of cPYTD)
	
	Private _cYTDs As EntitySet(Of cYTD)
	
	Private _ccYTDs As EntitySet(Of ccYTD)
	
	Private _ccPYTDs As EntitySet(Of ccPYTD)
	
	Private _ccPCYAs As EntitySet(Of ccPCYA)
	
	Private _cDatas As EntitySet(Of cData)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSurveySeriesIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveySeriesIDChanged()
    End Sub
    Partial Private Sub OnSurveyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveyIDChanged()
    End Sub
    Partial Private Sub OnDateIDChanging(value As Date)
    End Sub
    Partial Private Sub OnDateIDChanged()
    End Sub
    Partial Private Sub OnYearChanging(value As Integer)
    End Sub
    Partial Private Sub OnYearChanged()
    End Sub
    Partial Private Sub OnQuarterChanging(value As Integer)
    End Sub
    Partial Private Sub OnQuarterChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._fDatas = New EntitySet(Of fData)(AddressOf Me.attach_fDatas, AddressOf Me.detach_fDatas)
		Me._cPCYAs = New EntitySet(Of cPCYA)(AddressOf Me.attach_cPCYAs, AddressOf Me.detach_cPCYAs)
		Me._cPYTDs = New EntitySet(Of cPYTD)(AddressOf Me.attach_cPYTDs, AddressOf Me.detach_cPYTDs)
		Me._cYTDs = New EntitySet(Of cYTD)(AddressOf Me.attach_cYTDs, AddressOf Me.detach_cYTDs)
		Me._ccYTDs = New EntitySet(Of ccYTD)(AddressOf Me.attach_ccYTDs, AddressOf Me.detach_ccYTDs)
		Me._ccPYTDs = New EntitySet(Of ccPYTD)(AddressOf Me.attach_ccPYTDs, AddressOf Me.detach_ccPYTDs)
		Me._ccPCYAs = New EntitySet(Of ccPCYA)(AddressOf Me.attach_ccPCYAs, AddressOf Me.detach_ccPCYAs)
		Me._cDatas = New EntitySet(Of cData)(AddressOf Me.attach_cDatas, AddressOf Me.detach_cDatas)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveySeriesID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SurveySeriesID() As Integer
		Get
			Return Me._SurveySeriesID
		End Get
		Set
			If ((Me._SurveySeriesID = value)  _
						= false) Then
				Me.OnSurveySeriesIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveySeriesID = value
				Me.SendPropertyChanged("SurveySeriesID")
				Me.OnSurveySeriesIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyID", DbType:="Int NOT NULL")>  _
	Public Property SurveyID() As Integer
		Get
			Return Me._SurveyID
		End Get
		Set
			If ((Me._SurveyID = value)  _
						= false) Then
				Me.OnSurveyIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveyID = value
				Me.SendPropertyChanged("SurveyID")
				Me.OnSurveyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateID", DbType:="Date NOT NULL")>  _
	Public Property DateID() As Date
		Get
			Return Me._DateID
		End Get
		Set
			If ((Me._DateID = value)  _
						= false) Then
				Me.OnDateIDChanging(value)
				Me.SendPropertyChanging
				Me._DateID = value
				Me.SendPropertyChanged("DateID")
				Me.OnDateIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Year", DbType:="Int NOT NULL")>  _
	Public Property Year() As Integer
		Get
			Return Me._Year
		End Get
		Set
			If ((Me._Year = value)  _
						= false) Then
				Me.OnYearChanging(value)
				Me.SendPropertyChanging
				Me._Year = value
				Me.SendPropertyChanged("Year")
				Me.OnYearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quarter", DbType:="Int NOT NULL")>  _
	Public Property Quarter() As Integer
		Get
			Return Me._Quarter
		End Get
		Set
			If ((Me._Quarter = value)  _
						= false) Then
				Me.OnQuarterChanging(value)
				Me.SendPropertyChanging
				Me._Quarter = value
				Me.SendPropertyChanged("Quarter")
				Me.OnQuarterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSurveySeries_fData", Storage:="_fDatas", ThisKey:="SurveySeriesID", OtherKey:="SurveySeriesID")>  _
	Public Property fDatas() As EntitySet(Of fData)
		Get
			Return Me._fDatas
		End Get
		Set
			Me._fDatas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSurveySeries_cPCYA", Storage:="_cPCYAs", ThisKey:="SurveySeriesID", OtherKey:="SurveySeriesID")>  _
	Public Property cPCYAs() As EntitySet(Of cPCYA)
		Get
			Return Me._cPCYAs
		End Get
		Set
			Me._cPCYAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSurveySeries_cPYTD", Storage:="_cPYTDs", ThisKey:="SurveySeriesID", OtherKey:="SurveySeriesID")>  _
	Public Property cPYTDs() As EntitySet(Of cPYTD)
		Get
			Return Me._cPYTDs
		End Get
		Set
			Me._cPYTDs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSurveySeries_cYTD", Storage:="_cYTDs", ThisKey:="SurveySeriesID", OtherKey:="SurveySeriesID")>  _
	Public Property cYTDs() As EntitySet(Of cYTD)
		Get
			Return Me._cYTDs
		End Get
		Set
			Me._cYTDs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSurveySeries_ccYTD", Storage:="_ccYTDs", ThisKey:="SurveySeriesID", OtherKey:="SurveySeriesID")>  _
	Public Property ccYTDs() As EntitySet(Of ccYTD)
		Get
			Return Me._ccYTDs
		End Get
		Set
			Me._ccYTDs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSurveySeries_ccPYTD", Storage:="_ccPYTDs", ThisKey:="SurveySeriesID", OtherKey:="SurveySeriesID")>  _
	Public Property ccPYTDs() As EntitySet(Of ccPYTD)
		Get
			Return Me._ccPYTDs
		End Get
		Set
			Me._ccPYTDs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSurveySeries_ccPCYA", Storage:="_ccPCYAs", ThisKey:="SurveySeriesID", OtherKey:="SurveySeriesID")>  _
	Public Property ccPCYAs() As EntitySet(Of ccPCYA)
		Get
			Return Me._ccPCYAs
		End Get
		Set
			Me._ccPCYAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSurveySeries_cData", Storage:="_cDatas", ThisKey:="SurveySeriesID", OtherKey:="SurveySeriesID")>  _
	Public Property cDatas() As EntitySet(Of cData)
		Get
			Return Me._cDatas
		End Get
		Set
			Me._cDatas.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_fDatas(ByVal entity As fData)
		Me.SendPropertyChanging
		entity.dSurveySeries = Me
	End Sub
	
	Private Sub detach_fDatas(ByVal entity As fData)
		Me.SendPropertyChanging
		entity.dSurveySeries = Nothing
	End Sub
	
	Private Sub attach_cPCYAs(ByVal entity As cPCYA)
		Me.SendPropertyChanging
		entity.dSurveySeries = Me
	End Sub
	
	Private Sub detach_cPCYAs(ByVal entity As cPCYA)
		Me.SendPropertyChanging
		entity.dSurveySeries = Nothing
	End Sub
	
	Private Sub attach_cPYTDs(ByVal entity As cPYTD)
		Me.SendPropertyChanging
		entity.dSurveySeries = Me
	End Sub
	
	Private Sub detach_cPYTDs(ByVal entity As cPYTD)
		Me.SendPropertyChanging
		entity.dSurveySeries = Nothing
	End Sub
	
	Private Sub attach_cYTDs(ByVal entity As cYTD)
		Me.SendPropertyChanging
		entity.dSurveySeries = Me
	End Sub
	
	Private Sub detach_cYTDs(ByVal entity As cYTD)
		Me.SendPropertyChanging
		entity.dSurveySeries = Nothing
	End Sub
	
	Private Sub attach_ccYTDs(ByVal entity As ccYTD)
		Me.SendPropertyChanging
		entity.dSurveySeries = Me
	End Sub
	
	Private Sub detach_ccYTDs(ByVal entity As ccYTD)
		Me.SendPropertyChanging
		entity.dSurveySeries = Nothing
	End Sub
	
	Private Sub attach_ccPYTDs(ByVal entity As ccPYTD)
		Me.SendPropertyChanging
		entity.dSurveySeries = Me
	End Sub
	
	Private Sub detach_ccPYTDs(ByVal entity As ccPYTD)
		Me.SendPropertyChanging
		entity.dSurveySeries = Nothing
	End Sub
	
	Private Sub attach_ccPCYAs(ByVal entity As ccPCYA)
		Me.SendPropertyChanging
		entity.dSurveySeries = Me
	End Sub
	
	Private Sub detach_ccPCYAs(ByVal entity As ccPCYA)
		Me.SendPropertyChanging
		entity.dSurveySeries = Nothing
	End Sub
	
	Private Sub attach_cDatas(ByVal entity As cData)
		Me.SendPropertyChanging
		entity.dSurveySeries = Me
	End Sub
	
	Private Sub detach_cDatas(ByVal entity As cData)
		Me.SendPropertyChanging
		entity.dSurveySeries = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.fData")>  _
Partial Public Class fData
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DataID As Integer
	
	Private _FieldID As Integer
	
	Private _WorkbookID As Integer
	
	Private _SurveySeriesID As Integer
	
	Private _MOR As System.Nullable(Of Short)
	
	Private _Value As String
	
	Private _Number As System.Nullable(Of Double)
	
	Private _cPCYA As EntityRef(Of cPCYA)
	
	Private _cPYTD As EntityRef(Of cPYTD)
	
	Private _cYTD As EntityRef(Of cYTD)
	
	Private _dSurveySery As EntityRef(Of dSurveySeries)
	
	Private _ddField As EntityRef(Of ddField)
	
	Private _dWorkbook As EntityRef(Of dWorkbook)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDataIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDataIDChanged()
    End Sub
    Partial Private Sub OnFieldIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFieldIDChanged()
    End Sub
    Partial Private Sub OnWorkbookIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnWorkbookIDChanged()
    End Sub
    Partial Private Sub OnSurveySeriesIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveySeriesIDChanged()
    End Sub
    Partial Private Sub OnMORChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMORChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As String)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnNumberChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._cPCYA = CType(Nothing, EntityRef(Of cPCYA))
		Me._cPYTD = CType(Nothing, EntityRef(Of cPYTD))
		Me._cYTD = CType(Nothing, EntityRef(Of cYTD))
		Me._dSurveySery = CType(Nothing, EntityRef(Of dSurveySeries))
		Me._ddField = CType(Nothing, EntityRef(Of ddField))
		Me._dWorkbook = CType(Nothing, EntityRef(Of dWorkbook))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DataID() As Integer
		Get
			Return Me._DataID
		End Get
		Set
			If ((Me._DataID = value)  _
						= false) Then
				Me.OnDataIDChanging(value)
				Me.SendPropertyChanging
				Me._DataID = value
				Me.SendPropertyChanged("DataID")
				Me.OnDataIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldID", DbType:="Int NOT NULL")>  _
	Public Property FieldID() As Integer
		Get
			Return Me._FieldID
		End Get
		Set
			If ((Me._FieldID = value)  _
						= false) Then
				If Me._ddField.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFieldIDChanging(value)
				Me.SendPropertyChanging
				Me._FieldID = value
				Me.SendPropertyChanged("FieldID")
				Me.OnFieldIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WorkbookID", DbType:="Int NOT NULL")>  _
	Public Property WorkbookID() As Integer
		Get
			Return Me._WorkbookID
		End Get
		Set
			If ((Me._WorkbookID = value)  _
						= false) Then
				If Me._dWorkbook.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnWorkbookIDChanging(value)
				Me.SendPropertyChanging
				Me._WorkbookID = value
				Me.SendPropertyChanged("WorkbookID")
				Me.OnWorkbookIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveySeriesID", DbType:="Int NOT NULL")>  _
	Public Property SurveySeriesID() As Integer
		Get
			Return Me._SurveySeriesID
		End Get
		Set
			If ((Me._SurveySeriesID = value)  _
						= false) Then
				If Me._dSurveySery.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSurveySeriesIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveySeriesID = value
				Me.SendPropertyChanged("SurveySeriesID")
				Me.OnSurveySeriesIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOR", DbType:="SmallInt")>  _
	Public Property MOR() As System.Nullable(Of Short)
		Get
			Return Me._MOR
		End Get
		Set
			If (Me._MOR.Equals(value) = false) Then
				Me.OnMORChanging(value)
				Me.SendPropertyChanging
				Me._MOR = value
				Me.SendPropertyChanged("MOR")
				Me.OnMORChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="NVarChar(50)")>  _
	Public Property Value() As String
		Get
			Return Me._Value
		End Get
		Set
			If (String.Equals(Me._Value, value) = false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Number", DbType:="Float")>  _
	Public Property Number() As System.Nullable(Of Double)
		Get
			Return Me._Number
		End Get
		Set
			If (Me._Number.Equals(value) = false) Then
				Me.OnNumberChanging(value)
				Me.SendPropertyChanging
				Me._Number = value
				Me.SendPropertyChanged("Number")
				Me.OnNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="fData_cPCYA", Storage:="_cPCYA", ThisKey:="DataID", OtherKey:="DataID", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property cPCYA() As cPCYA
		Get
			Return Me._cPCYA.Entity
		End Get
		Set
			Dim previousValue As cPCYA = Me._cPCYA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._cPCYA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._cPCYA.Entity = Nothing
					previousValue.fData = Nothing
				End If
				Me._cPCYA.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.fData = Me
				End If
				Me.SendPropertyChanged("cPCYA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="fData_cPYTD", Storage:="_cPYTD", ThisKey:="DataID", OtherKey:="DataID", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property cPYTD() As cPYTD
		Get
			Return Me._cPYTD.Entity
		End Get
		Set
			Dim previousValue As cPYTD = Me._cPYTD.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._cPYTD.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._cPYTD.Entity = Nothing
					previousValue.fData = Nothing
				End If
				Me._cPYTD.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.fData = Me
				End If
				Me.SendPropertyChanged("cPYTD")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="fData_cYTD", Storage:="_cYTD", ThisKey:="DataID", OtherKey:="DataID", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property cYTD() As cYTD
		Get
			Return Me._cYTD.Entity
		End Get
		Set
			Dim previousValue As cYTD = Me._cYTD.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._cYTD.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._cYTD.Entity = Nothing
					previousValue.fData = Nothing
				End If
				Me._cYTD.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.fData = Me
				End If
				Me.SendPropertyChanged("cYTD")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSurveySeries_fData", Storage:="_dSurveySery", ThisKey:="SurveySeriesID", OtherKey:="SurveySeriesID", IsForeignKey:=true)>  _
	Public Property dSurveySeries() As dSurveySeries
		Get
			Return Me._dSurveySery.Entity
		End Get
		Set
			Dim previousValue As dSurveySeries = Me._dSurveySery.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._dSurveySery.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._dSurveySery.Entity = Nothing
					previousValue.fDatas.Remove(Me)
				End If
				Me._dSurveySery.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.fDatas.Add(Me)
					Me._SurveySeriesID = value.SurveySeriesID
				Else
					Me._SurveySeriesID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("dSurveySeries")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddField_fData", Storage:="_ddField", ThisKey:="FieldID", OtherKey:="FieldID", IsForeignKey:=true)>  _
	Public Property ddField() As ddField
		Get
			Return Me._ddField.Entity
		End Get
		Set
			Dim previousValue As ddField = Me._ddField.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ddField.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ddField.Entity = Nothing
					previousValue.fDatas.Remove(Me)
				End If
				Me._ddField.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.fDatas.Add(Me)
					Me._FieldID = value.FieldID
				Else
					Me._FieldID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ddField")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dWorkbook_fData", Storage:="_dWorkbook", ThisKey:="WorkbookID", OtherKey:="WorkbookID", IsForeignKey:=true)>  _
	Public Property dWorkbook() As dWorkbook
		Get
			Return Me._dWorkbook.Entity
		End Get
		Set
			Dim previousValue As dWorkbook = Me._dWorkbook.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._dWorkbook.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._dWorkbook.Entity = Nothing
					previousValue.fDatas.Remove(Me)
				End If
				Me._dWorkbook.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.fDatas.Add(Me)
					Me._WorkbookID = value.WorkbookID
				Else
					Me._WorkbookID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("dWorkbook")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.rExtractData")>  _
Partial Public Class rExtractData
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ExtractID As Integer
	
	Private _Responses As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnExtractIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnExtractIDChanged()
    End Sub
    Partial Private Sub OnResponsesChanging(value As String)
    End Sub
    Partial Private Sub OnResponsesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExtractID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ExtractID() As Integer
		Get
			Return Me._ExtractID
		End Get
		Set
			If ((Me._ExtractID = value)  _
						= false) Then
				Me.OnExtractIDChanging(value)
				Me.SendPropertyChanging
				Me._ExtractID = value
				Me.SendPropertyChanged("ExtractID")
				Me.OnExtractIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Responses", DbType:="NVarChar(MAX)")>  _
	Public Property Responses() As String
		Get
			Return Me._Responses
		End Get
		Set
			If (String.Equals(Me._Responses, value) = false) Then
				Me.OnResponsesChanging(value)
				Me.SendPropertyChanging
				Me._Responses = value
				Me.SendPropertyChanged("Responses")
				Me.OnResponsesChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TestData")>  _
Partial Public Class TestData
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DataID As Integer
	
	Private _FieldID As Integer
	
	Private _WorkbookID As Integer
	
	Private _SurveySeriesID As Integer
	
	Private _MOR As System.Nullable(Of Short)
	
	Private _Value As String
	
	Private _Number As System.Nullable(Of Double)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDataIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDataIDChanged()
    End Sub
    Partial Private Sub OnFieldIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFieldIDChanged()
    End Sub
    Partial Private Sub OnWorkbookIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnWorkbookIDChanged()
    End Sub
    Partial Private Sub OnSurveySeriesIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveySeriesIDChanged()
    End Sub
    Partial Private Sub OnMORChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMORChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As String)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnNumberChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DataID() As Integer
		Get
			Return Me._DataID
		End Get
		Set
			If ((Me._DataID = value)  _
						= false) Then
				Me.OnDataIDChanging(value)
				Me.SendPropertyChanging
				Me._DataID = value
				Me.SendPropertyChanged("DataID")
				Me.OnDataIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldID", DbType:="Int NOT NULL")>  _
	Public Property FieldID() As Integer
		Get
			Return Me._FieldID
		End Get
		Set
			If ((Me._FieldID = value)  _
						= false) Then
				Me.OnFieldIDChanging(value)
				Me.SendPropertyChanging
				Me._FieldID = value
				Me.SendPropertyChanged("FieldID")
				Me.OnFieldIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WorkbookID", DbType:="Int NOT NULL")>  _
	Public Property WorkbookID() As Integer
		Get
			Return Me._WorkbookID
		End Get
		Set
			If ((Me._WorkbookID = value)  _
						= false) Then
				Me.OnWorkbookIDChanging(value)
				Me.SendPropertyChanging
				Me._WorkbookID = value
				Me.SendPropertyChanged("WorkbookID")
				Me.OnWorkbookIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveySeriesID", DbType:="Int NOT NULL")>  _
	Public Property SurveySeriesID() As Integer
		Get
			Return Me._SurveySeriesID
		End Get
		Set
			If ((Me._SurveySeriesID = value)  _
						= false) Then
				Me.OnSurveySeriesIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveySeriesID = value
				Me.SendPropertyChanged("SurveySeriesID")
				Me.OnSurveySeriesIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOR", DbType:="SmallInt")>  _
	Public Property MOR() As System.Nullable(Of Short)
		Get
			Return Me._MOR
		End Get
		Set
			If (Me._MOR.Equals(value) = false) Then
				Me.OnMORChanging(value)
				Me.SendPropertyChanging
				Me._MOR = value
				Me.SendPropertyChanged("MOR")
				Me.OnMORChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="NVarChar(50)")>  _
	Public Property Value() As String
		Get
			Return Me._Value
		End Get
		Set
			If (String.Equals(Me._Value, value) = false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Number", DbType:="Float")>  _
	Public Property Number() As System.Nullable(Of Double)
		Get
			Return Me._Number
		End Get
		Set
			If (Me._Number.Equals(value) = false) Then
				Me.OnNumberChanging(value)
				Me.SendPropertyChanging
				Me._Number = value
				Me.SendPropertyChanged("Number")
				Me.OnNumberChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.dOrgMaster")>  _
Partial Public Class dOrgMaster
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OrganizationID As Integer
	
	Private _CRMID As String
	
	Private _LegalName As String
	
	Private _InactiveB As Boolean
	
	Private _dSources As EntitySet(Of dSource)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOrganizationIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrganizationIDChanged()
    End Sub
    Partial Private Sub OnCRMIDChanging(value As String)
    End Sub
    Partial Private Sub OnCRMIDChanged()
    End Sub
    Partial Private Sub OnLegalNameChanging(value As String)
    End Sub
    Partial Private Sub OnLegalNameChanged()
    End Sub
    Partial Private Sub OnInactiveBChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInactiveBChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._dSources = New EntitySet(Of dSource)(AddressOf Me.attach_dSources, AddressOf Me.detach_dSources)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrganizationID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property OrganizationID() As Integer
		Get
			Return Me._OrganizationID
		End Get
		Set
			If ((Me._OrganizationID = value)  _
						= false) Then
				Me.OnOrganizationIDChanging(value)
				Me.SendPropertyChanging
				Me._OrganizationID = value
				Me.SendPropertyChanged("OrganizationID")
				Me.OnOrganizationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CRMID", DbType:="NVarChar(25) ")>  _
	Public Property CRMID() As String
		Get
			Return Me._CRMID
		End Get
		Set
			If (String.Equals(Me._CRMID, value) = false) Then
				Me.OnCRMIDChanging(value)
				Me.SendPropertyChanging
				Me._CRMID = value
				Me.SendPropertyChanged("CRMID")
				Me.OnCRMIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LegalName", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property LegalName() As String
		Get
			Return Me._LegalName
		End Get
		Set
			If (String.Equals(Me._LegalName, value) = false) Then
				Me.OnLegalNameChanging(value)
				Me.SendPropertyChanging
				Me._LegalName = value
				Me.SendPropertyChanged("LegalName")
				Me.OnLegalNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InactiveB")>  _
	Public Property InactiveB() As Boolean
		Get
			Return Me._InactiveB
		End Get
		Set
			If ((Me._InactiveB = value)  _
						= false) Then
				Me.OnInactiveBChanging(value)
				Me.SendPropertyChanging
				Me._InactiveB = value
				Me.SendPropertyChanged("InactiveB")
				Me.OnInactiveBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dOrgMaster_dSource", Storage:="_dSources", ThisKey:="OrganizationID", OtherKey:="OrganizationID")>  _
	Public Property dSources() As EntitySet(Of dSource)
		Get
			Return Me._dSources
		End Get
		Set
			Me._dSources.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_dSources(ByVal entity As dSource)
		Me.SendPropertyChanging
		entity.dOrgMaster = Me
	End Sub
	
	Private Sub detach_dSources(ByVal entity As dSource)
		Me.SendPropertyChanging
		entity.dOrgMaster = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.dFrequency")>  _
Partial Public Class dFrequency
	
	Private _FrequencyAllowedID As Integer
	
	Private _Frequency As System.Nullable(Of Char)
	
	Private _AllowedMonth As Integer
	
	Private _AllowedDay As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FrequencyAllowedID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property FrequencyAllowedID() As Integer
		Get
			Return Me._FrequencyAllowedID
		End Get
		Set
			If ((Me._FrequencyAllowedID = value)  _
						= false) Then
				Me._FrequencyAllowedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Frequency", DbType:="Char(1)")>  _
	Public Property Frequency() As System.Nullable(Of Char)
		Get
			Return Me._Frequency
		End Get
		Set
			If (Me._Frequency.Equals(value) = false) Then
				Me._Frequency = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AllowedMonth", DbType:="Int NOT NULL")>  _
	Public Property AllowedMonth() As Integer
		Get
			Return Me._AllowedMonth
		End Get
		Set
			If ((Me._AllowedMonth = value)  _
						= false) Then
				Me._AllowedMonth = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AllowedDay", DbType:="Int NOT NULL")>  _
	Public Property AllowedDay() As Integer
		Get
			Return Me._AllowedDay
		End Get
		Set
			If ((Me._AllowedDay = value)  _
						= false) Then
				Me._AllowedDay = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.dGroups")>  _
Partial Public Class dGroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GroupID As Integer
	
	Private _PrefGroupName As String
	
	Private _SurveyID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGroupIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnGroupIDChanged()
    End Sub
    Partial Private Sub OnPrefGroupNameChanging(value As String)
    End Sub
    Partial Private Sub OnPrefGroupNameChanged()
    End Sub
    Partial Private Sub OnSurveyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveyIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property GroupID() As Integer
		Get
			Return Me._GroupID
		End Get
		Set
			If ((Me._GroupID = value)  _
						= false) Then
				Me.OnGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._GroupID = value
				Me.SendPropertyChanged("GroupID")
				Me.OnGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrefGroupName", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property PrefGroupName() As String
		Get
			Return Me._PrefGroupName
		End Get
		Set
			If (String.Equals(Me._PrefGroupName, value) = false) Then
				Me.OnPrefGroupNameChanging(value)
				Me.SendPropertyChanging
				Me._PrefGroupName = value
				Me.SendPropertyChanged("PrefGroupName")
				Me.OnPrefGroupNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyID", DbType:="Int NOT NULL")>  _
	Public Property SurveyID() As Integer
		Get
			Return Me._SurveyID
		End Get
		Set
			If ((Me._SurveyID = value)  _
						= false) Then
				Me.OnSurveyIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveyID = value
				Me.SendPropertyChanged("SurveyID")
				Me.OnSurveyIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ddExceptionSets")>  _
Partial Public Class ddExceptionSet
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ExceptionSetID As Integer
	
	Private _Description As String
	
	Private _ddFields As EntitySet(Of ddField)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnExceptionSetIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnExceptionSetIDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ddFields = New EntitySet(Of ddField)(AddressOf Me.attach_ddFields, AddressOf Me.detach_ddFields)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExceptionSetID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ExceptionSetID() As Integer
		Get
			Return Me._ExceptionSetID
		End Get
		Set
			If ((Me._ExceptionSetID = value)  _
						= false) Then
				Me.OnExceptionSetIDChanging(value)
				Me.SendPropertyChanging
				Me._ExceptionSetID = value
				Me.SendPropertyChanged("ExceptionSetID")
				Me.OnExceptionSetIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(50)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddExceptionSet_ddField", Storage:="_ddFields", ThisKey:="ExceptionSetID", OtherKey:="ExceptionSetID")>  _
	Public Property ddFields() As EntitySet(Of ddField)
		Get
			Return Me._ddFields
		End Get
		Set
			Me._ddFields.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ddFields(ByVal entity As ddField)
		Me.SendPropertyChanging
		entity.ddExceptionSet = Me
	End Sub
	
	Private Sub detach_ddFields(ByVal entity As ddField)
		Me.SendPropertyChanging
		entity.ddExceptionSet = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ddMetrics")>  _
Partial Public Class ddMetric
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MetricID As Integer
	
	Private _Metric As String
	
	Private _ddcFields As EntitySet(Of ddcField)
	
	Private _ddFields As EntitySet(Of ddField)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMetricIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMetricIDChanged()
    End Sub
    Partial Private Sub OnMetricChanging(value As String)
    End Sub
    Partial Private Sub OnMetricChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ddcFields = New EntitySet(Of ddcField)(AddressOf Me.attach_ddcFields, AddressOf Me.detach_ddcFields)
		Me._ddFields = New EntitySet(Of ddField)(AddressOf Me.attach_ddFields, AddressOf Me.detach_ddFields)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MetricID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property MetricID() As Integer
		Get
			Return Me._MetricID
		End Get
		Set
			If ((Me._MetricID = value)  _
						= false) Then
				Me.OnMetricIDChanging(value)
				Me.SendPropertyChanging
				Me._MetricID = value
				Me.SendPropertyChanged("MetricID")
				Me.OnMetricIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Metric", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Metric() As String
		Get
			Return Me._Metric
		End Get
		Set
			If (String.Equals(Me._Metric, value) = false) Then
				Me.OnMetricChanging(value)
				Me.SendPropertyChanging
				Me._Metric = value
				Me.SendPropertyChanged("Metric")
				Me.OnMetricChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddMetric_ddcField", Storage:="_ddcFields", ThisKey:="MetricID", OtherKey:="MetricID")>  _
	Public Property ddcFields() As EntitySet(Of ddcField)
		Get
			Return Me._ddcFields
		End Get
		Set
			Me._ddcFields.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddMetric_ddField", Storage:="_ddFields", ThisKey:="MetricID", OtherKey:="MetricID")>  _
	Public Property ddFields() As EntitySet(Of ddField)
		Get
			Return Me._ddFields
		End Get
		Set
			Me._ddFields.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ddcFields(ByVal entity As ddcField)
		Me.SendPropertyChanging
		entity.ddMetric = Me
	End Sub
	
	Private Sub detach_ddcFields(ByVal entity As ddcField)
		Me.SendPropertyChanging
		entity.ddMetric = Nothing
	End Sub
	
	Private Sub attach_ddFields(ByVal entity As ddField)
		Me.SendPropertyChanging
		entity.ddMetric = Me
	End Sub
	
	Private Sub detach_ddFields(ByVal entity As ddField)
		Me.SendPropertyChanging
		entity.ddMetric = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ddScales")>  _
Partial Public Class ddScale
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ScaleID As Integer
	
	Private _Scale As String
	
	Private _ddcFields As EntitySet(Of ddcField)
	
	Private _ddFields As EntitySet(Of ddField)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnScaleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnScaleIDChanged()
    End Sub
    Partial Private Sub OnScaleChanging(value As String)
    End Sub
    Partial Private Sub OnScaleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ddcFields = New EntitySet(Of ddcField)(AddressOf Me.attach_ddcFields, AddressOf Me.detach_ddcFields)
		Me._ddFields = New EntitySet(Of ddField)(AddressOf Me.attach_ddFields, AddressOf Me.detach_ddFields)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ScaleID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ScaleID() As Integer
		Get
			Return Me._ScaleID
		End Get
		Set
			If ((Me._ScaleID = value)  _
						= false) Then
				Me.OnScaleIDChanging(value)
				Me.SendPropertyChanging
				Me._ScaleID = value
				Me.SendPropertyChanged("ScaleID")
				Me.OnScaleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Scale", DbType:="NVarChar(50)")>  _
	Public Property Scale() As String
		Get
			Return Me._Scale
		End Get
		Set
			If (String.Equals(Me._Scale, value) = false) Then
				Me.OnScaleChanging(value)
				Me.SendPropertyChanging
				Me._Scale = value
				Me.SendPropertyChanged("Scale")
				Me.OnScaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddScale_ddcField", Storage:="_ddcFields", ThisKey:="ScaleID", OtherKey:="ScaleID")>  _
	Public Property ddcFields() As EntitySet(Of ddcField)
		Get
			Return Me._ddcFields
		End Get
		Set
			Me._ddcFields.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddScale_ddField", Storage:="_ddFields", ThisKey:="ScaleID", OtherKey:="ScaleID")>  _
	Public Property ddFields() As EntitySet(Of ddField)
		Get
			Return Me._ddFields
		End Get
		Set
			Me._ddFields.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ddcFields(ByVal entity As ddcField)
		Me.SendPropertyChanging
		entity.ddScale = Me
	End Sub
	
	Private Sub detach_ddcFields(ByVal entity As ddcField)
		Me.SendPropertyChanging
		entity.ddScale = Nothing
	End Sub
	
	Private Sub attach_ddFields(ByVal entity As ddField)
		Me.SendPropertyChanging
		entity.ddScale = Me
	End Sub
	
	Private Sub detach_ddFields(ByVal entity As ddField)
		Me.SendPropertyChanging
		entity.ddScale = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ddUnits")>  _
Partial Public Class ddUnit
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UnitID As Integer
	
	Private _Unit As String
	
	Private _ddcFields As EntitySet(Of ddcField)
	
	Private _ddFields As EntitySet(Of ddField)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUnitIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUnitIDChanged()
    End Sub
    Partial Private Sub OnUnitChanging(value As String)
    End Sub
    Partial Private Sub OnUnitChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ddcFields = New EntitySet(Of ddcField)(AddressOf Me.attach_ddcFields, AddressOf Me.detach_ddcFields)
		Me._ddFields = New EntitySet(Of ddField)(AddressOf Me.attach_ddFields, AddressOf Me.detach_ddFields)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UnitID() As Integer
		Get
			Return Me._UnitID
		End Get
		Set
			If ((Me._UnitID = value)  _
						= false) Then
				Me.OnUnitIDChanging(value)
				Me.SendPropertyChanging
				Me._UnitID = value
				Me.SendPropertyChanged("UnitID")
				Me.OnUnitIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Unit", DbType:="NVarChar(50)")>  _
	Public Property Unit() As String
		Get
			Return Me._Unit
		End Get
		Set
			If (String.Equals(Me._Unit, value) = false) Then
				Me.OnUnitChanging(value)
				Me.SendPropertyChanging
				Me._Unit = value
				Me.SendPropertyChanged("Unit")
				Me.OnUnitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddUnit_ddcField", Storage:="_ddcFields", ThisKey:="UnitID", OtherKey:="UnitID")>  _
	Public Property ddcFields() As EntitySet(Of ddcField)
		Get
			Return Me._ddcFields
		End Get
		Set
			Me._ddcFields.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddUnit_ddField", Storage:="_ddFields", ThisKey:="UnitID", OtherKey:="UnitID")>  _
	Public Property ddFields() As EntitySet(Of ddField)
		Get
			Return Me._ddFields
		End Get
		Set
			Me._ddFields.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ddcFields(ByVal entity As ddcField)
		Me.SendPropertyChanging
		entity.ddUnit = Me
	End Sub
	
	Private Sub detach_ddcFields(ByVal entity As ddcField)
		Me.SendPropertyChanging
		entity.ddUnit = Nothing
	End Sub
	
	Private Sub attach_ddFields(ByVal entity As ddField)
		Me.SendPropertyChanging
		entity.ddUnit = Me
	End Sub
	
	Private Sub detach_ddFields(ByVal entity As ddField)
		Me.SendPropertyChanging
		entity.ddUnit = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ddCodeSets")>  _
Partial Public Class ddCodeSet
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CodeSetID As Integer
	
	Private _CodeSet As String
	
	Private _ddCodes As EntitySet(Of ddCode)
	
	Private _ddAttributes As EntitySet(Of ddAttribute)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCodeSetIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCodeSetIDChanged()
    End Sub
    Partial Private Sub OnCodeSetChanging(value As String)
    End Sub
    Partial Private Sub OnCodeSetChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ddCodes = New EntitySet(Of ddCode)(AddressOf Me.attach_ddCodes, AddressOf Me.detach_ddCodes)
		Me._ddAttributes = New EntitySet(Of ddAttribute)(AddressOf Me.attach_ddAttributes, AddressOf Me.detach_ddAttributes)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodeSetID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CodeSetID() As Integer
		Get
			Return Me._CodeSetID
		End Get
		Set
			If ((Me._CodeSetID = value)  _
						= false) Then
				Me.OnCodeSetIDChanging(value)
				Me.SendPropertyChanging
				Me._CodeSetID = value
				Me.SendPropertyChanged("CodeSetID")
				Me.OnCodeSetIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodeSet", DbType:="NVarChar(50)")>  _
	Public Property CodeSet() As String
		Get
			Return Me._CodeSet
		End Get
		Set
			If (String.Equals(Me._CodeSet, value) = false) Then
				Me.OnCodeSetChanging(value)
				Me.SendPropertyChanging
				Me._CodeSet = value
				Me.SendPropertyChanged("CodeSet")
				Me.OnCodeSetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddCodeSet_ddCode", Storage:="_ddCodes", ThisKey:="CodeSetID", OtherKey:="CodeSetID")>  _
	Public Property ddCodes() As EntitySet(Of ddCode)
		Get
			Return Me._ddCodes
		End Get
		Set
			Me._ddCodes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddCodeSet_ddAttribute", Storage:="_ddAttributes", ThisKey:="CodeSetID", OtherKey:="CodeSetID")>  _
	Public Property ddAttributes() As EntitySet(Of ddAttribute)
		Get
			Return Me._ddAttributes
		End Get
		Set
			Me._ddAttributes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ddCodes(ByVal entity As ddCode)
		Me.SendPropertyChanging
		entity.ddCodeSet = Me
	End Sub
	
	Private Sub detach_ddCodes(ByVal entity As ddCode)
		Me.SendPropertyChanging
		entity.ddCodeSet = Nothing
	End Sub
	
	Private Sub attach_ddAttributes(ByVal entity As ddAttribute)
		Me.SendPropertyChanging
		entity.ddCodeSet = Me
	End Sub
	
	Private Sub detach_ddAttributes(ByVal entity As ddAttribute)
		Me.SendPropertyChanging
		entity.ddCodeSet = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ddCodes")>  _
Partial Public Class ddCode
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CodeID As Integer
	
	Private _CodeSetID As Integer
	
	Private _Code As System.Nullable(Of Integer)
	
	Private _Text As String
	
	Private _ddCodeSet As EntityRef(Of ddCodeSet)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCodeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCodeIDChanged()
    End Sub
    Partial Private Sub OnCodeSetIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCodeSetIDChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnTextChanging(value As String)
    End Sub
    Partial Private Sub OnTextChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ddCodeSet = CType(Nothing, EntityRef(Of ddCodeSet))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodeID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CodeID() As Integer
		Get
			Return Me._CodeID
		End Get
		Set
			If ((Me._CodeID = value)  _
						= false) Then
				Me.OnCodeIDChanging(value)
				Me.SendPropertyChanging
				Me._CodeID = value
				Me.SendPropertyChanged("CodeID")
				Me.OnCodeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodeSetID", DbType:="Int NOT NULL")>  _
	Public Property CodeSetID() As Integer
		Get
			Return Me._CodeSetID
		End Get
		Set
			If ((Me._CodeSetID = value)  _
						= false) Then
				If Me._ddCodeSet.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCodeSetIDChanging(value)
				Me.SendPropertyChanging
				Me._CodeSetID = value
				Me.SendPropertyChanged("CodeSetID")
				Me.OnCodeSetIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code", DbType:="Int")>  _
	Public Property Code() As System.Nullable(Of Integer)
		Get
			Return Me._Code
		End Get
		Set
			If (Me._Code.Equals(value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Text", DbType:="NVarChar(50)")>  _
	Public Property Text() As String
		Get
			Return Me._Text
		End Get
		Set
			If (String.Equals(Me._Text, value) = false) Then
				Me.OnTextChanging(value)
				Me.SendPropertyChanging
				Me._Text = value
				Me.SendPropertyChanged("Text")
				Me.OnTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddCodeSet_ddCode", Storage:="_ddCodeSet", ThisKey:="CodeSetID", OtherKey:="CodeSetID", IsForeignKey:=true)>  _
	Public Property ddCodeSet() As ddCodeSet
		Get
			Return Me._ddCodeSet.Entity
		End Get
		Set
			Dim previousValue As ddCodeSet = Me._ddCodeSet.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ddCodeSet.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ddCodeSet.Entity = Nothing
					previousValue.ddCodes.Remove(Me)
				End If
				Me._ddCodeSet.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ddCodes.Add(Me)
					Me._CodeSetID = value.CodeSetID
				Else
					Me._CodeSetID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ddCodeSet")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ddcFields")>  _
Partial Public Class ddcField
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FieldID As Integer
	
	Private _SurveyID As Integer
	
	Private _Source As Char
	
	Private _DataTypeID As Integer
	
	Private _ExceptionSetID As Integer
	
	Private _MetricID As Integer
	
	Private _ScaleID As Integer
	
	Private _UnitID As Integer
	
	Private _Description As String
	
	Private _cDatas As EntitySet(Of cData)
	
	Private _ddMetric As EntityRef(Of ddMetric)
	
	Private _ddScale As EntityRef(Of ddScale)
	
	Private _ddUnit As EntityRef(Of ddUnit)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFieldIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFieldIDChanged()
    End Sub
    Partial Private Sub OnSurveyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveyIDChanged()
    End Sub
    Partial Private Sub OnSourceChanging(value As Char)
    End Sub
    Partial Private Sub OnSourceChanged()
    End Sub
    Partial Private Sub OnDataTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDataTypeIDChanged()
    End Sub
    Partial Private Sub OnExceptionSetIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnExceptionSetIDChanged()
    End Sub
    Partial Private Sub OnMetricIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMetricIDChanged()
    End Sub
    Partial Private Sub OnScaleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnScaleIDChanged()
    End Sub
    Partial Private Sub OnUnitIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUnitIDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._cDatas = New EntitySet(Of cData)(AddressOf Me.attach_cDatas, AddressOf Me.detach_cDatas)
		Me._ddMetric = CType(Nothing, EntityRef(Of ddMetric))
		Me._ddScale = CType(Nothing, EntityRef(Of ddScale))
		Me._ddUnit = CType(Nothing, EntityRef(Of ddUnit))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FieldID() As Integer
		Get
			Return Me._FieldID
		End Get
		Set
			If ((Me._FieldID = value)  _
						= false) Then
				Me.OnFieldIDChanging(value)
				Me.SendPropertyChanging
				Me._FieldID = value
				Me.SendPropertyChanged("FieldID")
				Me.OnFieldIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyID", DbType:="Int NOT NULL")>  _
	Public Property SurveyID() As Integer
		Get
			Return Me._SurveyID
		End Get
		Set
			If ((Me._SurveyID = value)  _
						= false) Then
				Me.OnSurveyIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveyID = value
				Me.SendPropertyChanged("SurveyID")
				Me.OnSurveyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Source", DbType:="NChar(1) NOT NULL")>  _
	Public Property Source() As Char
		Get
			Return Me._Source
		End Get
		Set
			If ((Me._Source = value)  _
						= false) Then
				Me.OnSourceChanging(value)
				Me.SendPropertyChanging
				Me._Source = value
				Me.SendPropertyChanged("Source")
				Me.OnSourceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataTypeID", DbType:="Int NOT NULL")>  _
	Public Property DataTypeID() As Integer
		Get
			Return Me._DataTypeID
		End Get
		Set
			If ((Me._DataTypeID = value)  _
						= false) Then
				Me.OnDataTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._DataTypeID = value
				Me.SendPropertyChanged("DataTypeID")
				Me.OnDataTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExceptionSetID", DbType:="Int NOT NULL")>  _
	Public Property ExceptionSetID() As Integer
		Get
			Return Me._ExceptionSetID
		End Get
		Set
			If ((Me._ExceptionSetID = value)  _
						= false) Then
				Me.OnExceptionSetIDChanging(value)
				Me.SendPropertyChanging
				Me._ExceptionSetID = value
				Me.SendPropertyChanged("ExceptionSetID")
				Me.OnExceptionSetIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MetricID", DbType:="Int NOT NULL")>  _
	Public Property MetricID() As Integer
		Get
			Return Me._MetricID
		End Get
		Set
			If ((Me._MetricID = value)  _
						= false) Then
				If Me._ddMetric.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMetricIDChanging(value)
				Me.SendPropertyChanging
				Me._MetricID = value
				Me.SendPropertyChanged("MetricID")
				Me.OnMetricIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ScaleID", DbType:="Int NOT NULL")>  _
	Public Property ScaleID() As Integer
		Get
			Return Me._ScaleID
		End Get
		Set
			If ((Me._ScaleID = value)  _
						= false) Then
				If Me._ddScale.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnScaleIDChanging(value)
				Me.SendPropertyChanging
				Me._ScaleID = value
				Me.SendPropertyChanged("ScaleID")
				Me.OnScaleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitID", DbType:="Int NOT NULL")>  _
	Public Property UnitID() As Integer
		Get
			Return Me._UnitID
		End Get
		Set
			If ((Me._UnitID = value)  _
						= false) Then
				If Me._ddUnit.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUnitIDChanging(value)
				Me.SendPropertyChanging
				Me._UnitID = value
				Me.SendPropertyChanged("UnitID")
				Me.OnUnitIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(255)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddcField_cData", Storage:="_cDatas", ThisKey:="FieldID", OtherKey:="FieldID")>  _
	Public Property cDatas() As EntitySet(Of cData)
		Get
			Return Me._cDatas
		End Get
		Set
			Me._cDatas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddMetric_ddcField", Storage:="_ddMetric", ThisKey:="MetricID", OtherKey:="MetricID", IsForeignKey:=true)>  _
	Public Property ddMetric() As ddMetric
		Get
			Return Me._ddMetric.Entity
		End Get
		Set
			Dim previousValue As ddMetric = Me._ddMetric.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ddMetric.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ddMetric.Entity = Nothing
					previousValue.ddcFields.Remove(Me)
				End If
				Me._ddMetric.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ddcFields.Add(Me)
					Me._MetricID = value.MetricID
				Else
					Me._MetricID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ddMetric")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddScale_ddcField", Storage:="_ddScale", ThisKey:="ScaleID", OtherKey:="ScaleID", IsForeignKey:=true)>  _
	Public Property ddScale() As ddScale
		Get
			Return Me._ddScale.Entity
		End Get
		Set
			Dim previousValue As ddScale = Me._ddScale.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ddScale.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ddScale.Entity = Nothing
					previousValue.ddcFields.Remove(Me)
				End If
				Me._ddScale.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ddcFields.Add(Me)
					Me._ScaleID = value.ScaleID
				Else
					Me._ScaleID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ddScale")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddUnit_ddcField", Storage:="_ddUnit", ThisKey:="UnitID", OtherKey:="UnitID", IsForeignKey:=true)>  _
	Public Property ddUnit() As ddUnit
		Get
			Return Me._ddUnit.Entity
		End Get
		Set
			Dim previousValue As ddUnit = Me._ddUnit.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ddUnit.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ddUnit.Entity = Nothing
					previousValue.ddcFields.Remove(Me)
				End If
				Me._ddUnit.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ddcFields.Add(Me)
					Me._UnitID = value.UnitID
				Else
					Me._UnitID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ddUnit")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_cDatas(ByVal entity As cData)
		Me.SendPropertyChanging
		entity.ddcField = Me
	End Sub
	
	Private Sub detach_cDatas(ByVal entity As cData)
		Me.SendPropertyChanging
		entity.ddcField = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ddFields")>  _
Partial Public Class ddField
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FieldID As Integer
	
	Private _SortKey As Integer
	
	Private _SurveyID As System.Nullable(Of Integer)
	
	Private _Source As String
	
	Private _Field As String
	
	Private _xlRow As System.Nullable(Of Integer)
	
	Private _xlColumn As System.Nullable(Of Integer)
	
	Private _xlSheet As String
	
	Private _xlCell As String
	
	Private _DataTypeID As Integer
	
	Private _ExceptionSetID As Integer
	
	Private _MetricID As Integer
	
	Private _ScaleID As Integer
	
	Private _UnitID As Integer
	
	Private _Description As String
	
	Private _fDatas As EntitySet(Of fData)
	
	Private _fLayout As EntityRef(Of fLayout)
	
	Private _ddDataType As EntityRef(Of ddDataType)
	
	Private _ddExceptionSet As EntityRef(Of ddExceptionSet)
	
	Private _ddMetric As EntityRef(Of ddMetric)
	
	Private _ddScale As EntityRef(Of ddScale)
	
	Private _ddUnit As EntityRef(Of ddUnit)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFieldIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFieldIDChanged()
    End Sub
    Partial Private Sub OnSortKeyChanging(value As Integer)
    End Sub
    Partial Private Sub OnSortKeyChanged()
    End Sub
    Partial Private Sub OnSurveyIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSurveyIDChanged()
    End Sub
    Partial Private Sub OnSourceChanging(value As String)
    End Sub
    Partial Private Sub OnSourceChanged()
    End Sub
    Partial Private Sub OnFieldChanging(value As String)
    End Sub
    Partial Private Sub OnFieldChanged()
    End Sub
    Partial Private Sub OnxlRowChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnxlRowChanged()
    End Sub
    Partial Private Sub OnxlColumnChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnxlColumnChanged()
    End Sub
    Partial Private Sub OnxlSheetChanging(value As String)
    End Sub
    Partial Private Sub OnxlSheetChanged()
    End Sub
    Partial Private Sub OnxlCellChanging(value As String)
    End Sub
    Partial Private Sub OnxlCellChanged()
    End Sub
    Partial Private Sub OnDataTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDataTypeIDChanged()
    End Sub
    Partial Private Sub OnExceptionSetIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnExceptionSetIDChanged()
    End Sub
    Partial Private Sub OnMetricIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMetricIDChanged()
    End Sub
    Partial Private Sub OnScaleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnScaleIDChanged()
    End Sub
    Partial Private Sub OnUnitIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUnitIDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._fDatas = New EntitySet(Of fData)(AddressOf Me.attach_fDatas, AddressOf Me.detach_fDatas)
		Me._fLayout = CType(Nothing, EntityRef(Of fLayout))
		Me._ddDataType = CType(Nothing, EntityRef(Of ddDataType))
		Me._ddExceptionSet = CType(Nothing, EntityRef(Of ddExceptionSet))
		Me._ddMetric = CType(Nothing, EntityRef(Of ddMetric))
		Me._ddScale = CType(Nothing, EntityRef(Of ddScale))
		Me._ddUnit = CType(Nothing, EntityRef(Of ddUnit))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FieldID() As Integer
		Get
			Return Me._FieldID
		End Get
		Set
			If ((Me._FieldID = value)  _
						= false) Then
				Me.OnFieldIDChanging(value)
				Me.SendPropertyChanging
				Me._FieldID = value
				Me.SendPropertyChanged("FieldID")
				Me.OnFieldIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortKey", DbType:="Int NOT NULL")>  _
	Public Property SortKey() As Integer
		Get
			Return Me._SortKey
		End Get
		Set
			If ((Me._SortKey = value)  _
						= false) Then
				Me.OnSortKeyChanging(value)
				Me.SendPropertyChanging
				Me._SortKey = value
				Me.SendPropertyChanged("SortKey")
				Me.OnSortKeyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyID", DbType:="Int")>  _
	Public Property SurveyID() As System.Nullable(Of Integer)
		Get
			Return Me._SurveyID
		End Get
		Set
			If (Me._SurveyID.Equals(value) = false) Then
				Me.OnSurveyIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveyID = value
				Me.SendPropertyChanged("SurveyID")
				Me.OnSurveyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Source", DbType:="NVarChar(5)")>  _
	Public Property Source() As String
		Get
			Return Me._Source
		End Get
		Set
			If (String.Equals(Me._Source, value) = false) Then
				Me.OnSourceChanging(value)
				Me.SendPropertyChanging
				Me._Source = value
				Me.SendPropertyChanged("Source")
				Me.OnSourceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Field", DbType:="NVarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property Field() As String
		Get
			Return Me._Field
		End Get
		Set
			If (String.Equals(Me._Field, value) = false) Then
				Me.OnFieldChanging(value)
				Me.SendPropertyChanging
				Me._Field = value
				Me.SendPropertyChanged("Field")
				Me.OnFieldChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_xlRow", DbType:="Int")>  _
	Public Property xlRow() As System.Nullable(Of Integer)
		Get
			Return Me._xlRow
		End Get
		Set
			If (Me._xlRow.Equals(value) = false) Then
				Me.OnxlRowChanging(value)
				Me.SendPropertyChanging
				Me._xlRow = value
				Me.SendPropertyChanged("xlRow")
				Me.OnxlRowChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_xlColumn", DbType:="Int")>  _
	Public Property xlColumn() As System.Nullable(Of Integer)
		Get
			Return Me._xlColumn
		End Get
		Set
			If (Me._xlColumn.Equals(value) = false) Then
				Me.OnxlColumnChanging(value)
				Me.SendPropertyChanging
				Me._xlColumn = value
				Me.SendPropertyChanged("xlColumn")
				Me.OnxlColumnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_xlSheet", DbType:="NVarChar(50)")>  _
	Public Property xlSheet() As String
		Get
			Return Me._xlSheet
		End Get
		Set
			If (String.Equals(Me._xlSheet, value) = false) Then
				Me.OnxlSheetChanging(value)
				Me.SendPropertyChanging
				Me._xlSheet = value
				Me.SendPropertyChanged("xlSheet")
				Me.OnxlSheetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_xlCell", DbType:="NVarChar(50)")>  _
	Public Property xlCell() As String
		Get
			Return Me._xlCell
		End Get
		Set
			If (String.Equals(Me._xlCell, value) = false) Then
				Me.OnxlCellChanging(value)
				Me.SendPropertyChanging
				Me._xlCell = value
				Me.SendPropertyChanged("xlCell")
				Me.OnxlCellChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataTypeID", DbType:="Int NOT NULL")>  _
	Public Property DataTypeID() As Integer
		Get
			Return Me._DataTypeID
		End Get
		Set
			If ((Me._DataTypeID = value)  _
						= false) Then
				If Me._ddDataType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDataTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._DataTypeID = value
				Me.SendPropertyChanged("DataTypeID")
				Me.OnDataTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExceptionSetID", DbType:="Int NOT NULL")>  _
	Public Property ExceptionSetID() As Integer
		Get
			Return Me._ExceptionSetID
		End Get
		Set
			If ((Me._ExceptionSetID = value)  _
						= false) Then
				If Me._ddExceptionSet.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnExceptionSetIDChanging(value)
				Me.SendPropertyChanging
				Me._ExceptionSetID = value
				Me.SendPropertyChanged("ExceptionSetID")
				Me.OnExceptionSetIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MetricID", DbType:="Int NOT NULL")>  _
	Public Property MetricID() As Integer
		Get
			Return Me._MetricID
		End Get
		Set
			If ((Me._MetricID = value)  _
						= false) Then
				If Me._ddMetric.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMetricIDChanging(value)
				Me.SendPropertyChanging
				Me._MetricID = value
				Me.SendPropertyChanged("MetricID")
				Me.OnMetricIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ScaleID", DbType:="Int NOT NULL")>  _
	Public Property ScaleID() As Integer
		Get
			Return Me._ScaleID
		End Get
		Set
			If ((Me._ScaleID = value)  _
						= false) Then
				If Me._ddScale.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnScaleIDChanging(value)
				Me.SendPropertyChanging
				Me._ScaleID = value
				Me.SendPropertyChanged("ScaleID")
				Me.OnScaleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitID", DbType:="Int NOT NULL")>  _
	Public Property UnitID() As Integer
		Get
			Return Me._UnitID
		End Get
		Set
			If ((Me._UnitID = value)  _
						= false) Then
				If Me._ddUnit.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUnitIDChanging(value)
				Me.SendPropertyChanging
				Me._UnitID = value
				Me.SendPropertyChanged("UnitID")
				Me.OnUnitIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(255)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddField_fData", Storage:="_fDatas", ThisKey:="FieldID", OtherKey:="FieldID")>  _
	Public Property fDatas() As EntitySet(Of fData)
		Get
			Return Me._fDatas
		End Get
		Set
			Me._fDatas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddField_fLayout", Storage:="_fLayout", ThisKey:="FieldID", OtherKey:="FieldID", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property fLayout() As fLayout
		Get
			Return Me._fLayout.Entity
		End Get
		Set
			Dim previousValue As fLayout = Me._fLayout.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._fLayout.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._fLayout.Entity = Nothing
					previousValue.ddField = Nothing
				End If
				Me._fLayout.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.ddField = Me
				End If
				Me.SendPropertyChanged("fLayout")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddDataType_ddField", Storage:="_ddDataType", ThisKey:="DataTypeID", OtherKey:="DataTypeID", IsForeignKey:=true)>  _
	Public Property ddDataType() As ddDataType
		Get
			Return Me._ddDataType.Entity
		End Get
		Set
			Dim previousValue As ddDataType = Me._ddDataType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ddDataType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ddDataType.Entity = Nothing
					previousValue.ddFields.Remove(Me)
				End If
				Me._ddDataType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ddFields.Add(Me)
					Me._DataTypeID = value.DataTypeID
				Else
					Me._DataTypeID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ddDataType")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddExceptionSet_ddField", Storage:="_ddExceptionSet", ThisKey:="ExceptionSetID", OtherKey:="ExceptionSetID", IsForeignKey:=true)>  _
	Public Property ddExceptionSet() As ddExceptionSet
		Get
			Return Me._ddExceptionSet.Entity
		End Get
		Set
			Dim previousValue As ddExceptionSet = Me._ddExceptionSet.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ddExceptionSet.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ddExceptionSet.Entity = Nothing
					previousValue.ddFields.Remove(Me)
				End If
				Me._ddExceptionSet.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ddFields.Add(Me)
					Me._ExceptionSetID = value.ExceptionSetID
				Else
					Me._ExceptionSetID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ddExceptionSet")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddMetric_ddField", Storage:="_ddMetric", ThisKey:="MetricID", OtherKey:="MetricID", IsForeignKey:=true)>  _
	Public Property ddMetric() As ddMetric
		Get
			Return Me._ddMetric.Entity
		End Get
		Set
			Dim previousValue As ddMetric = Me._ddMetric.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ddMetric.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ddMetric.Entity = Nothing
					previousValue.ddFields.Remove(Me)
				End If
				Me._ddMetric.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ddFields.Add(Me)
					Me._MetricID = value.MetricID
				Else
					Me._MetricID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ddMetric")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddScale_ddField", Storage:="_ddScale", ThisKey:="ScaleID", OtherKey:="ScaleID", IsForeignKey:=true)>  _
	Public Property ddScale() As ddScale
		Get
			Return Me._ddScale.Entity
		End Get
		Set
			Dim previousValue As ddScale = Me._ddScale.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ddScale.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ddScale.Entity = Nothing
					previousValue.ddFields.Remove(Me)
				End If
				Me._ddScale.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ddFields.Add(Me)
					Me._ScaleID = value.ScaleID
				Else
					Me._ScaleID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ddScale")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddUnit_ddField", Storage:="_ddUnit", ThisKey:="UnitID", OtherKey:="UnitID", IsForeignKey:=true)>  _
	Public Property ddUnit() As ddUnit
		Get
			Return Me._ddUnit.Entity
		End Get
		Set
			Dim previousValue As ddUnit = Me._ddUnit.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ddUnit.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ddUnit.Entity = Nothing
					previousValue.ddFields.Remove(Me)
				End If
				Me._ddUnit.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ddFields.Add(Me)
					Me._UnitID = value.UnitID
				Else
					Me._UnitID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ddUnit")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_fDatas(ByVal entity As fData)
		Me.SendPropertyChanging
		entity.ddField = Me
	End Sub
	
	Private Sub detach_fDatas(ByVal entity As fData)
		Me.SendPropertyChanging
		entity.ddField = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.cPCYA")>  _
Partial Public Class cPCYA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DataID As Integer
	
	Private _SurveySeriesID As Integer
	
	Private _SourceID As Integer
	
	Private _FieldID As Integer
	
	Private _MOR As System.Nullable(Of Short)
	
	Private _Value As String
	
	Private _Number As System.Nullable(Of Double)
	
	Private _dSurveySeries As EntityRef(Of dSurveySeries)
	
	Private _fData As EntityRef(Of fData)
	
	Private _dSource As EntityRef(Of dSource)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDataIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDataIDChanged()
    End Sub
    Partial Private Sub OnSurveySeriesIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveySeriesIDChanged()
    End Sub
    Partial Private Sub OnSourceIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSourceIDChanged()
    End Sub
    Partial Private Sub OnFieldIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFieldIDChanged()
    End Sub
    Partial Private Sub OnMORChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMORChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As String)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnNumberChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._dSurveySeries = CType(Nothing, EntityRef(Of dSurveySeries))
		Me._fData = CType(Nothing, EntityRef(Of fData))
		Me._dSource = CType(Nothing, EntityRef(Of dSource))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property DataID() As Integer
		Get
			Return Me._DataID
		End Get
		Set
			If ((Me._DataID = value)  _
						= false) Then
				If Me._fData.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDataIDChanging(value)
				Me.SendPropertyChanging
				Me._DataID = value
				Me.SendPropertyChanged("DataID")
				Me.OnDataIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveySeriesID", DbType:="Int NOT NULL")>  _
	Public Property SurveySeriesID() As Integer
		Get
			Return Me._SurveySeriesID
		End Get
		Set
			If ((Me._SurveySeriesID = value)  _
						= false) Then
				If Me._dSurveySeries.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSurveySeriesIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveySeriesID = value
				Me.SendPropertyChanged("SurveySeriesID")
				Me.OnSurveySeriesIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceID", DbType:="Int NOT NULL")>  _
	Public Property SourceID() As Integer
		Get
			Return Me._SourceID
		End Get
		Set
			If ((Me._SourceID = value)  _
						= false) Then
				If Me._dSource.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSourceIDChanging(value)
				Me.SendPropertyChanging
				Me._SourceID = value
				Me.SendPropertyChanged("SourceID")
				Me.OnSourceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldID", DbType:="Int NOT NULL")>  _
	Public Property FieldID() As Integer
		Get
			Return Me._FieldID
		End Get
		Set
			If ((Me._FieldID = value)  _
						= false) Then
				Me.OnFieldIDChanging(value)
				Me.SendPropertyChanging
				Me._FieldID = value
				Me.SendPropertyChanged("FieldID")
				Me.OnFieldIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOR", DbType:="SmallInt")>  _
	Public Property MOR() As System.Nullable(Of Short)
		Get
			Return Me._MOR
		End Get
		Set
			If (Me._MOR.Equals(value) = false) Then
				Me.OnMORChanging(value)
				Me.SendPropertyChanging
				Me._MOR = value
				Me.SendPropertyChanged("MOR")
				Me.OnMORChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="NVarChar(50)")>  _
	Public Property Value() As String
		Get
			Return Me._Value
		End Get
		Set
			If (String.Equals(Me._Value, value) = false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Number", DbType:="Float")>  _
	Public Property Number() As System.Nullable(Of Double)
		Get
			Return Me._Number
		End Get
		Set
			If (Me._Number.Equals(value) = false) Then
				Me.OnNumberChanging(value)
				Me.SendPropertyChanging
				Me._Number = value
				Me.SendPropertyChanged("Number")
				Me.OnNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSurveySeries_cPCYA", Storage:="_dSurveySeries", ThisKey:="SurveySeriesID", OtherKey:="SurveySeriesID", IsForeignKey:=true)>  _
	Public Property dSurveySeries() As dSurveySeries
		Get
			Return Me._dSurveySeries.Entity
		End Get
		Set
			Dim previousValue As dSurveySeries = Me._dSurveySeries.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._dSurveySeries.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._dSurveySeries.Entity = Nothing
					previousValue.cPCYAs.Remove(Me)
				End If
				Me._dSurveySeries.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cPCYAs.Add(Me)
					Me._SurveySeriesID = value.SurveySeriesID
				Else
					Me._SurveySeriesID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("dSurveySeries")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="fData_cPCYA", Storage:="_fData", ThisKey:="DataID", OtherKey:="DataID", IsForeignKey:=true)>  _
	Public Property fData() As fData
		Get
			Return Me._fData.Entity
		End Get
		Set
			Dim previousValue As fData = Me._fData.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._fData.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._fData.Entity = Nothing
					previousValue.cPCYA = Nothing
				End If
				Me._fData.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cPCYA = Me
					Me._DataID = value.DataID
				Else
					Me._DataID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("fData")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSource_cPCYA", Storage:="_dSource", ThisKey:="SourceID", OtherKey:="SourceID", IsForeignKey:=true)>  _
	Public Property dSource() As dSource
		Get
			Return Me._dSource.Entity
		End Get
		Set
			Dim previousValue As dSource = Me._dSource.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._dSource.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._dSource.Entity = Nothing
					previousValue.cPCYAs.Remove(Me)
				End If
				Me._dSource.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cPCYAs.Add(Me)
					Me._SourceID = value.SourceID
				Else
					Me._SourceID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("dSource")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.cPYTD")>  _
Partial Public Class cPYTD
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DataID As Integer
	
	Private _SurveySeriesID As Integer
	
	Private _SourceID As Integer
	
	Private _FieldID As Integer
	
	Private _MOR As System.Nullable(Of Short)
	
	Private _Value As String
	
	Private _Number As System.Nullable(Of Double)
	
	Private _dSurveySeries As EntityRef(Of dSurveySeries)
	
	Private _fData As EntityRef(Of fData)
	
	Private _dSource As EntityRef(Of dSource)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDataIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDataIDChanged()
    End Sub
    Partial Private Sub OnSurveySeriesIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveySeriesIDChanged()
    End Sub
    Partial Private Sub OnSourceIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSourceIDChanged()
    End Sub
    Partial Private Sub OnFieldIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFieldIDChanged()
    End Sub
    Partial Private Sub OnMORChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMORChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As String)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnNumberChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._dSurveySeries = CType(Nothing, EntityRef(Of dSurveySeries))
		Me._fData = CType(Nothing, EntityRef(Of fData))
		Me._dSource = CType(Nothing, EntityRef(Of dSource))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property DataID() As Integer
		Get
			Return Me._DataID
		End Get
		Set
			If ((Me._DataID = value)  _
						= false) Then
				If Me._fData.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDataIDChanging(value)
				Me.SendPropertyChanging
				Me._DataID = value
				Me.SendPropertyChanged("DataID")
				Me.OnDataIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveySeriesID", DbType:="Int NOT NULL")>  _
	Public Property SurveySeriesID() As Integer
		Get
			Return Me._SurveySeriesID
		End Get
		Set
			If ((Me._SurveySeriesID = value)  _
						= false) Then
				If Me._dSurveySeries.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSurveySeriesIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveySeriesID = value
				Me.SendPropertyChanged("SurveySeriesID")
				Me.OnSurveySeriesIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceID", DbType:="Int NOT NULL")>  _
	Public Property SourceID() As Integer
		Get
			Return Me._SourceID
		End Get
		Set
			If ((Me._SourceID = value)  _
						= false) Then
				If Me._dSource.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSourceIDChanging(value)
				Me.SendPropertyChanging
				Me._SourceID = value
				Me.SendPropertyChanged("SourceID")
				Me.OnSourceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldID", DbType:="Int NOT NULL")>  _
	Public Property FieldID() As Integer
		Get
			Return Me._FieldID
		End Get
		Set
			If ((Me._FieldID = value)  _
						= false) Then
				Me.OnFieldIDChanging(value)
				Me.SendPropertyChanging
				Me._FieldID = value
				Me.SendPropertyChanged("FieldID")
				Me.OnFieldIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOR", DbType:="SmallInt")>  _
	Public Property MOR() As System.Nullable(Of Short)
		Get
			Return Me._MOR
		End Get
		Set
			If (Me._MOR.Equals(value) = false) Then
				Me.OnMORChanging(value)
				Me.SendPropertyChanging
				Me._MOR = value
				Me.SendPropertyChanged("MOR")
				Me.OnMORChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="NVarChar(50)")>  _
	Public Property Value() As String
		Get
			Return Me._Value
		End Get
		Set
			If (String.Equals(Me._Value, value) = false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Number", DbType:="Float")>  _
	Public Property Number() As System.Nullable(Of Double)
		Get
			Return Me._Number
		End Get
		Set
			If (Me._Number.Equals(value) = false) Then
				Me.OnNumberChanging(value)
				Me.SendPropertyChanging
				Me._Number = value
				Me.SendPropertyChanged("Number")
				Me.OnNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSurveySeries_cPYTD", Storage:="_dSurveySeries", ThisKey:="SurveySeriesID", OtherKey:="SurveySeriesID", IsForeignKey:=true)>  _
	Public Property dSurveySeries() As dSurveySeries
		Get
			Return Me._dSurveySeries.Entity
		End Get
		Set
			Dim previousValue As dSurveySeries = Me._dSurveySeries.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._dSurveySeries.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._dSurveySeries.Entity = Nothing
					previousValue.cPYTDs.Remove(Me)
				End If
				Me._dSurveySeries.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cPYTDs.Add(Me)
					Me._SurveySeriesID = value.SurveySeriesID
				Else
					Me._SurveySeriesID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("dSurveySeries")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="fData_cPYTD", Storage:="_fData", ThisKey:="DataID", OtherKey:="DataID", IsForeignKey:=true)>  _
	Public Property fData() As fData
		Get
			Return Me._fData.Entity
		End Get
		Set
			Dim previousValue As fData = Me._fData.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._fData.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._fData.Entity = Nothing
					previousValue.cPYTD = Nothing
				End If
				Me._fData.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cPYTD = Me
					Me._DataID = value.DataID
				Else
					Me._DataID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("fData")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSource_cPYTD", Storage:="_dSource", ThisKey:="SourceID", OtherKey:="SourceID", IsForeignKey:=true)>  _
	Public Property dSource() As dSource
		Get
			Return Me._dSource.Entity
		End Get
		Set
			Dim previousValue As dSource = Me._dSource.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._dSource.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._dSource.Entity = Nothing
					previousValue.cPYTDs.Remove(Me)
				End If
				Me._dSource.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cPYTDs.Add(Me)
					Me._SourceID = value.SourceID
				Else
					Me._SourceID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("dSource")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.cYTD")>  _
Partial Public Class cYTD
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DataID As Integer
	
	Private _SurveySeriesID As Integer
	
	Private _SourceID As Integer
	
	Private _FieldID As Integer
	
	Private _MOR As System.Nullable(Of Short)
	
	Private _Value As String
	
	Private _Number As System.Nullable(Of Double)
	
	Private _dSurveySeries As EntityRef(Of dSurveySeries)
	
	Private _fData As EntityRef(Of fData)
	
	Private _dSource As EntityRef(Of dSource)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDataIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDataIDChanged()
    End Sub
    Partial Private Sub OnSurveySeriesIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveySeriesIDChanged()
    End Sub
    Partial Private Sub OnSourceIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSourceIDChanged()
    End Sub
    Partial Private Sub OnFieldIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFieldIDChanged()
    End Sub
    Partial Private Sub OnMORChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMORChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As String)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnNumberChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._dSurveySeries = CType(Nothing, EntityRef(Of dSurveySeries))
		Me._fData = CType(Nothing, EntityRef(Of fData))
		Me._dSource = CType(Nothing, EntityRef(Of dSource))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property DataID() As Integer
		Get
			Return Me._DataID
		End Get
		Set
			If ((Me._DataID = value)  _
						= false) Then
				If Me._fData.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDataIDChanging(value)
				Me.SendPropertyChanging
				Me._DataID = value
				Me.SendPropertyChanged("DataID")
				Me.OnDataIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveySeriesID", DbType:="Int NOT NULL")>  _
	Public Property SurveySeriesID() As Integer
		Get
			Return Me._SurveySeriesID
		End Get
		Set
			If ((Me._SurveySeriesID = value)  _
						= false) Then
				If Me._dSurveySeries.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSurveySeriesIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveySeriesID = value
				Me.SendPropertyChanged("SurveySeriesID")
				Me.OnSurveySeriesIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceID", DbType:="Int NOT NULL")>  _
	Public Property SourceID() As Integer
		Get
			Return Me._SourceID
		End Get
		Set
			If ((Me._SourceID = value)  _
						= false) Then
				If Me._dSource.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSourceIDChanging(value)
				Me.SendPropertyChanging
				Me._SourceID = value
				Me.SendPropertyChanged("SourceID")
				Me.OnSourceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldID", DbType:="Int NOT NULL")>  _
	Public Property FieldID() As Integer
		Get
			Return Me._FieldID
		End Get
		Set
			If ((Me._FieldID = value)  _
						= false) Then
				Me.OnFieldIDChanging(value)
				Me.SendPropertyChanging
				Me._FieldID = value
				Me.SendPropertyChanged("FieldID")
				Me.OnFieldIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOR", DbType:="SmallInt")>  _
	Public Property MOR() As System.Nullable(Of Short)
		Get
			Return Me._MOR
		End Get
		Set
			If (Me._MOR.Equals(value) = false) Then
				Me.OnMORChanging(value)
				Me.SendPropertyChanging
				Me._MOR = value
				Me.SendPropertyChanged("MOR")
				Me.OnMORChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="NVarChar(50)")>  _
	Public Property Value() As String
		Get
			Return Me._Value
		End Get
		Set
			If (String.Equals(Me._Value, value) = false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Number", DbType:="Float")>  _
	Public Property Number() As System.Nullable(Of Double)
		Get
			Return Me._Number
		End Get
		Set
			If (Me._Number.Equals(value) = false) Then
				Me.OnNumberChanging(value)
				Me.SendPropertyChanging
				Me._Number = value
				Me.SendPropertyChanged("Number")
				Me.OnNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSurveySeries_cYTD", Storage:="_dSurveySeries", ThisKey:="SurveySeriesID", OtherKey:="SurveySeriesID", IsForeignKey:=true)>  _
	Public Property dSurveySeries() As dSurveySeries
		Get
			Return Me._dSurveySeries.Entity
		End Get
		Set
			Dim previousValue As dSurveySeries = Me._dSurveySeries.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._dSurveySeries.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._dSurveySeries.Entity = Nothing
					previousValue.cYTDs.Remove(Me)
				End If
				Me._dSurveySeries.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cYTDs.Add(Me)
					Me._SurveySeriesID = value.SurveySeriesID
				Else
					Me._SurveySeriesID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("dSurveySeries")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="fData_cYTD", Storage:="_fData", ThisKey:="DataID", OtherKey:="DataID", IsForeignKey:=true)>  _
	Public Property fData() As fData
		Get
			Return Me._fData.Entity
		End Get
		Set
			Dim previousValue As fData = Me._fData.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._fData.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._fData.Entity = Nothing
					previousValue.cYTD = Nothing
				End If
				Me._fData.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cYTD = Me
					Me._DataID = value.DataID
				Else
					Me._DataID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("fData")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSource_cYTD", Storage:="_dSource", ThisKey:="SourceID", OtherKey:="SourceID", IsForeignKey:=true)>  _
	Public Property dSource() As dSource
		Get
			Return Me._dSource.Entity
		End Get
		Set
			Dim previousValue As dSource = Me._dSource.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._dSource.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._dSource.Entity = Nothing
					previousValue.cYTDs.Remove(Me)
				End If
				Me._dSource.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cYTDs.Add(Me)
					Me._SourceID = value.SourceID
				Else
					Me._SourceID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("dSource")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ccYTD")>  _
Partial Public Class ccYTD
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DataID As Integer
	
	Private _SurveySeriesID As Integer
	
	Private _SourceID As Integer
	
	Private _FieldID As Integer
	
	Private _MOR As System.Nullable(Of Short)
	
	Private _Value As String
	
	Private _Number As System.Nullable(Of Double)
	
	Private _dSurveySeries As EntityRef(Of dSurveySeries)
	
	Private _cData As EntityRef(Of cData)
	
	Private _dSource As EntityRef(Of dSource)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDataIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDataIDChanged()
    End Sub
    Partial Private Sub OnSurveySeriesIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveySeriesIDChanged()
    End Sub
    Partial Private Sub OnSourceIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSourceIDChanged()
    End Sub
    Partial Private Sub OnFieldIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFieldIDChanged()
    End Sub
    Partial Private Sub OnMORChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMORChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As String)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnNumberChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._dSurveySeries = CType(Nothing, EntityRef(Of dSurveySeries))
		Me._cData = CType(Nothing, EntityRef(Of cData))
		Me._dSource = CType(Nothing, EntityRef(Of dSource))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property DataID() As Integer
		Get
			Return Me._DataID
		End Get
		Set
			If ((Me._DataID = value)  _
						= false) Then
				If Me._cData.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDataIDChanging(value)
				Me.SendPropertyChanging
				Me._DataID = value
				Me.SendPropertyChanged("DataID")
				Me.OnDataIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveySeriesID", DbType:="Int NOT NULL")>  _
	Public Property SurveySeriesID() As Integer
		Get
			Return Me._SurveySeriesID
		End Get
		Set
			If ((Me._SurveySeriesID = value)  _
						= false) Then
				If Me._dSurveySeries.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSurveySeriesIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveySeriesID = value
				Me.SendPropertyChanged("SurveySeriesID")
				Me.OnSurveySeriesIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceID", DbType:="Int NOT NULL")>  _
	Public Property SourceID() As Integer
		Get
			Return Me._SourceID
		End Get
		Set
			If ((Me._SourceID = value)  _
						= false) Then
				If Me._dSource.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSourceIDChanging(value)
				Me.SendPropertyChanging
				Me._SourceID = value
				Me.SendPropertyChanged("SourceID")
				Me.OnSourceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldID", DbType:="Int NOT NULL")>  _
	Public Property FieldID() As Integer
		Get
			Return Me._FieldID
		End Get
		Set
			If ((Me._FieldID = value)  _
						= false) Then
				Me.OnFieldIDChanging(value)
				Me.SendPropertyChanging
				Me._FieldID = value
				Me.SendPropertyChanged("FieldID")
				Me.OnFieldIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOR", DbType:="SmallInt")>  _
	Public Property MOR() As System.Nullable(Of Short)
		Get
			Return Me._MOR
		End Get
		Set
			If (Me._MOR.Equals(value) = false) Then
				Me.OnMORChanging(value)
				Me.SendPropertyChanging
				Me._MOR = value
				Me.SendPropertyChanged("MOR")
				Me.OnMORChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="NVarChar(50)")>  _
	Public Property Value() As String
		Get
			Return Me._Value
		End Get
		Set
			If (String.Equals(Me._Value, value) = false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Number", DbType:="Float")>  _
	Public Property Number() As System.Nullable(Of Double)
		Get
			Return Me._Number
		End Get
		Set
			If (Me._Number.Equals(value) = false) Then
				Me.OnNumberChanging(value)
				Me.SendPropertyChanging
				Me._Number = value
				Me.SendPropertyChanged("Number")
				Me.OnNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSurveySeries_ccYTD", Storage:="_dSurveySeries", ThisKey:="SurveySeriesID", OtherKey:="SurveySeriesID", IsForeignKey:=true)>  _
	Public Property dSurveySeries() As dSurveySeries
		Get
			Return Me._dSurveySeries.Entity
		End Get
		Set
			Dim previousValue As dSurveySeries = Me._dSurveySeries.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._dSurveySeries.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._dSurveySeries.Entity = Nothing
					previousValue.ccYTDs.Remove(Me)
				End If
				Me._dSurveySeries.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ccYTDs.Add(Me)
					Me._SurveySeriesID = value.SurveySeriesID
				Else
					Me._SurveySeriesID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("dSurveySeries")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cData_ccYTD", Storage:="_cData", ThisKey:="DataID", OtherKey:="DataID", IsForeignKey:=true)>  _
	Public Property cData() As cData
		Get
			Return Me._cData.Entity
		End Get
		Set
			Dim previousValue As cData = Me._cData.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._cData.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._cData.Entity = Nothing
					previousValue.ccYTD = Nothing
				End If
				Me._cData.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ccYTD = Me
					Me._DataID = value.DataID
				Else
					Me._DataID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("cData")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSource_ccYTD", Storage:="_dSource", ThisKey:="SourceID", OtherKey:="SourceID", IsForeignKey:=true)>  _
	Public Property dSource() As dSource
		Get
			Return Me._dSource.Entity
		End Get
		Set
			Dim previousValue As dSource = Me._dSource.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._dSource.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._dSource.Entity = Nothing
					previousValue.ccYTDs.Remove(Me)
				End If
				Me._dSource.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ccYTDs.Add(Me)
					Me._SourceID = value.SourceID
				Else
					Me._SourceID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("dSource")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ccPYTD")>  _
Partial Public Class ccPYTD
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DataID As Integer
	
	Private _SurveySeriesID As Integer
	
	Private _SourceID As Integer
	
	Private _FieldID As Integer
	
	Private _MOR As System.Nullable(Of Short)
	
	Private _Value As String
	
	Private _Number As System.Nullable(Of Double)
	
	Private _dSurveySeries As EntityRef(Of dSurveySeries)
	
	Private _cData As EntityRef(Of cData)
	
	Private _dSource As EntityRef(Of dSource)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDataIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDataIDChanged()
    End Sub
    Partial Private Sub OnSurveySeriesIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveySeriesIDChanged()
    End Sub
    Partial Private Sub OnSourceIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSourceIDChanged()
    End Sub
    Partial Private Sub OnFieldIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFieldIDChanged()
    End Sub
    Partial Private Sub OnMORChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMORChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As String)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnNumberChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._dSurveySeries = CType(Nothing, EntityRef(Of dSurveySeries))
		Me._cData = CType(Nothing, EntityRef(Of cData))
		Me._dSource = CType(Nothing, EntityRef(Of dSource))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property DataID() As Integer
		Get
			Return Me._DataID
		End Get
		Set
			If ((Me._DataID = value)  _
						= false) Then
				If Me._cData.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDataIDChanging(value)
				Me.SendPropertyChanging
				Me._DataID = value
				Me.SendPropertyChanged("DataID")
				Me.OnDataIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveySeriesID", DbType:="Int NOT NULL")>  _
	Public Property SurveySeriesID() As Integer
		Get
			Return Me._SurveySeriesID
		End Get
		Set
			If ((Me._SurveySeriesID = value)  _
						= false) Then
				If Me._dSurveySeries.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSurveySeriesIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveySeriesID = value
				Me.SendPropertyChanged("SurveySeriesID")
				Me.OnSurveySeriesIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceID", DbType:="Int NOT NULL")>  _
	Public Property SourceID() As Integer
		Get
			Return Me._SourceID
		End Get
		Set
			If ((Me._SourceID = value)  _
						= false) Then
				If Me._dSource.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSourceIDChanging(value)
				Me.SendPropertyChanging
				Me._SourceID = value
				Me.SendPropertyChanged("SourceID")
				Me.OnSourceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldID", DbType:="Int NOT NULL")>  _
	Public Property FieldID() As Integer
		Get
			Return Me._FieldID
		End Get
		Set
			If ((Me._FieldID = value)  _
						= false) Then
				Me.OnFieldIDChanging(value)
				Me.SendPropertyChanging
				Me._FieldID = value
				Me.SendPropertyChanged("FieldID")
				Me.OnFieldIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOR", DbType:="SmallInt")>  _
	Public Property MOR() As System.Nullable(Of Short)
		Get
			Return Me._MOR
		End Get
		Set
			If (Me._MOR.Equals(value) = false) Then
				Me.OnMORChanging(value)
				Me.SendPropertyChanging
				Me._MOR = value
				Me.SendPropertyChanged("MOR")
				Me.OnMORChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="NVarChar(50)")>  _
	Public Property Value() As String
		Get
			Return Me._Value
		End Get
		Set
			If (String.Equals(Me._Value, value) = false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Number", DbType:="Float")>  _
	Public Property Number() As System.Nullable(Of Double)
		Get
			Return Me._Number
		End Get
		Set
			If (Me._Number.Equals(value) = false) Then
				Me.OnNumberChanging(value)
				Me.SendPropertyChanging
				Me._Number = value
				Me.SendPropertyChanged("Number")
				Me.OnNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSurveySeries_ccPYTD", Storage:="_dSurveySeries", ThisKey:="SurveySeriesID", OtherKey:="SurveySeriesID", IsForeignKey:=true)>  _
	Public Property dSurveySeries() As dSurveySeries
		Get
			Return Me._dSurveySeries.Entity
		End Get
		Set
			Dim previousValue As dSurveySeries = Me._dSurveySeries.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._dSurveySeries.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._dSurveySeries.Entity = Nothing
					previousValue.ccPYTDs.Remove(Me)
				End If
				Me._dSurveySeries.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ccPYTDs.Add(Me)
					Me._SurveySeriesID = value.SurveySeriesID
				Else
					Me._SurveySeriesID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("dSurveySeries")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cData_ccPYTD", Storage:="_cData", ThisKey:="DataID", OtherKey:="DataID", IsForeignKey:=true)>  _
	Public Property cData() As cData
		Get
			Return Me._cData.Entity
		End Get
		Set
			Dim previousValue As cData = Me._cData.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._cData.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._cData.Entity = Nothing
					previousValue.ccPYTD = Nothing
				End If
				Me._cData.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ccPYTD = Me
					Me._DataID = value.DataID
				Else
					Me._DataID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("cData")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSource_ccPYTD", Storage:="_dSource", ThisKey:="SourceID", OtherKey:="SourceID", IsForeignKey:=true)>  _
	Public Property dSource() As dSource
		Get
			Return Me._dSource.Entity
		End Get
		Set
			Dim previousValue As dSource = Me._dSource.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._dSource.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._dSource.Entity = Nothing
					previousValue.ccPYTDs.Remove(Me)
				End If
				Me._dSource.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ccPYTDs.Add(Me)
					Me._SourceID = value.SourceID
				Else
					Me._SourceID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("dSource")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ccPCYA")>  _
Partial Public Class ccPCYA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DataID As Integer
	
	Private _SurveySeriesID As Integer
	
	Private _SourceID As Integer
	
	Private _FieldID As Integer
	
	Private _MOR As System.Nullable(Of Short)
	
	Private _Value As String
	
	Private _Number As System.Nullable(Of Double)
	
	Private _dSurveySeries As EntityRef(Of dSurveySeries)
	
	Private _cData As EntityRef(Of cData)
	
	Private _dSource As EntityRef(Of dSource)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDataIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDataIDChanged()
    End Sub
    Partial Private Sub OnSurveySeriesIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveySeriesIDChanged()
    End Sub
    Partial Private Sub OnSourceIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSourceIDChanged()
    End Sub
    Partial Private Sub OnFieldIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFieldIDChanged()
    End Sub
    Partial Private Sub OnMORChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMORChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As String)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnNumberChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._dSurveySeries = CType(Nothing, EntityRef(Of dSurveySeries))
		Me._cData = CType(Nothing, EntityRef(Of cData))
		Me._dSource = CType(Nothing, EntityRef(Of dSource))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property DataID() As Integer
		Get
			Return Me._DataID
		End Get
		Set
			If ((Me._DataID = value)  _
						= false) Then
				If Me._cData.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDataIDChanging(value)
				Me.SendPropertyChanging
				Me._DataID = value
				Me.SendPropertyChanged("DataID")
				Me.OnDataIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveySeriesID", DbType:="Int NOT NULL")>  _
	Public Property SurveySeriesID() As Integer
		Get
			Return Me._SurveySeriesID
		End Get
		Set
			If ((Me._SurveySeriesID = value)  _
						= false) Then
				If Me._dSurveySeries.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSurveySeriesIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveySeriesID = value
				Me.SendPropertyChanged("SurveySeriesID")
				Me.OnSurveySeriesIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceID", DbType:="Int NOT NULL")>  _
	Public Property SourceID() As Integer
		Get
			Return Me._SourceID
		End Get
		Set
			If ((Me._SourceID = value)  _
						= false) Then
				If Me._dSource.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSourceIDChanging(value)
				Me.SendPropertyChanging
				Me._SourceID = value
				Me.SendPropertyChanged("SourceID")
				Me.OnSourceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldID", DbType:="Int NOT NULL")>  _
	Public Property FieldID() As Integer
		Get
			Return Me._FieldID
		End Get
		Set
			If ((Me._FieldID = value)  _
						= false) Then
				Me.OnFieldIDChanging(value)
				Me.SendPropertyChanging
				Me._FieldID = value
				Me.SendPropertyChanged("FieldID")
				Me.OnFieldIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOR", DbType:="SmallInt")>  _
	Public Property MOR() As System.Nullable(Of Short)
		Get
			Return Me._MOR
		End Get
		Set
			If (Me._MOR.Equals(value) = false) Then
				Me.OnMORChanging(value)
				Me.SendPropertyChanging
				Me._MOR = value
				Me.SendPropertyChanged("MOR")
				Me.OnMORChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="NVarChar(50)")>  _
	Public Property Value() As String
		Get
			Return Me._Value
		End Get
		Set
			If (String.Equals(Me._Value, value) = false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Number", DbType:="Float")>  _
	Public Property Number() As System.Nullable(Of Double)
		Get
			Return Me._Number
		End Get
		Set
			If (Me._Number.Equals(value) = false) Then
				Me.OnNumberChanging(value)
				Me.SendPropertyChanging
				Me._Number = value
				Me.SendPropertyChanged("Number")
				Me.OnNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSurveySeries_ccPCYA", Storage:="_dSurveySeries", ThisKey:="SurveySeriesID", OtherKey:="SurveySeriesID", IsForeignKey:=true)>  _
	Public Property dSurveySeries() As dSurveySeries
		Get
			Return Me._dSurveySeries.Entity
		End Get
		Set
			Dim previousValue As dSurveySeries = Me._dSurveySeries.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._dSurveySeries.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._dSurveySeries.Entity = Nothing
					previousValue.ccPCYAs.Remove(Me)
				End If
				Me._dSurveySeries.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ccPCYAs.Add(Me)
					Me._SurveySeriesID = value.SurveySeriesID
				Else
					Me._SurveySeriesID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("dSurveySeries")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cData_ccPCYA", Storage:="_cData", ThisKey:="DataID", OtherKey:="DataID", IsForeignKey:=true)>  _
	Public Property cData() As cData
		Get
			Return Me._cData.Entity
		End Get
		Set
			Dim previousValue As cData = Me._cData.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._cData.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._cData.Entity = Nothing
					previousValue.ccPCYA = Nothing
				End If
				Me._cData.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ccPCYA = Me
					Me._DataID = value.DataID
				Else
					Me._DataID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("cData")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSource_ccPCYA", Storage:="_dSource", ThisKey:="SourceID", OtherKey:="SourceID", IsForeignKey:=true)>  _
	Public Property dSource() As dSource
		Get
			Return Me._dSource.Entity
		End Get
		Set
			Dim previousValue As dSource = Me._dSource.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._dSource.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._dSource.Entity = Nothing
					previousValue.ccPCYAs.Remove(Me)
				End If
				Me._dSource.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ccPCYAs.Add(Me)
					Me._SourceID = value.SourceID
				Else
					Me._SourceID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("dSource")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.cData")>  _
Partial Public Class cData
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DataID As Integer
	
	Private _FieldID As Integer
	
	Private _WorkbookID As Integer
	
	Private _SurveySeriesID As Integer
	
	Private _MOR As System.Nullable(Of Short)
	
	Private _Value As String
	
	Private _Number As System.Nullable(Of Double)
	
	Private _ccYTD As EntityRef(Of ccYTD)
	
	Private _ccPYTD As EntityRef(Of ccPYTD)
	
	Private _ccPCYA As EntityRef(Of ccPCYA)
	
	Private _ddcField As EntityRef(Of ddcField)
	
	Private _dSurveySeries As EntityRef(Of dSurveySeries)
	
	Private _dWorkbook As EntityRef(Of dWorkbook)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDataIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDataIDChanged()
    End Sub
    Partial Private Sub OnFieldIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFieldIDChanged()
    End Sub
    Partial Private Sub OnWorkbookIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnWorkbookIDChanged()
    End Sub
    Partial Private Sub OnSurveySeriesIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveySeriesIDChanged()
    End Sub
    Partial Private Sub OnMORChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMORChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As String)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnNumberChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ccYTD = CType(Nothing, EntityRef(Of ccYTD))
		Me._ccPYTD = CType(Nothing, EntityRef(Of ccPYTD))
		Me._ccPCYA = CType(Nothing, EntityRef(Of ccPCYA))
		Me._ddcField = CType(Nothing, EntityRef(Of ddcField))
		Me._dSurveySeries = CType(Nothing, EntityRef(Of dSurveySeries))
		Me._dWorkbook = CType(Nothing, EntityRef(Of dWorkbook))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DataID() As Integer
		Get
			Return Me._DataID
		End Get
		Set
			If ((Me._DataID = value)  _
						= false) Then
				Me.OnDataIDChanging(value)
				Me.SendPropertyChanging
				Me._DataID = value
				Me.SendPropertyChanged("DataID")
				Me.OnDataIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldID", DbType:="Int NOT NULL")>  _
	Public Property FieldID() As Integer
		Get
			Return Me._FieldID
		End Get
		Set
			If ((Me._FieldID = value)  _
						= false) Then
				If Me._ddcField.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFieldIDChanging(value)
				Me.SendPropertyChanging
				Me._FieldID = value
				Me.SendPropertyChanged("FieldID")
				Me.OnFieldIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WorkbookID", DbType:="Int NOT NULL")>  _
	Public Property WorkbookID() As Integer
		Get
			Return Me._WorkbookID
		End Get
		Set
			If ((Me._WorkbookID = value)  _
						= false) Then
				If Me._dWorkbook.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnWorkbookIDChanging(value)
				Me.SendPropertyChanging
				Me._WorkbookID = value
				Me.SendPropertyChanged("WorkbookID")
				Me.OnWorkbookIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveySeriesID", DbType:="Int NOT NULL")>  _
	Public Property SurveySeriesID() As Integer
		Get
			Return Me._SurveySeriesID
		End Get
		Set
			If ((Me._SurveySeriesID = value)  _
						= false) Then
				If Me._dSurveySeries.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSurveySeriesIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveySeriesID = value
				Me.SendPropertyChanged("SurveySeriesID")
				Me.OnSurveySeriesIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOR", DbType:="SmallInt")>  _
	Public Property MOR() As System.Nullable(Of Short)
		Get
			Return Me._MOR
		End Get
		Set
			If (Me._MOR.Equals(value) = false) Then
				Me.OnMORChanging(value)
				Me.SendPropertyChanging
				Me._MOR = value
				Me.SendPropertyChanged("MOR")
				Me.OnMORChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="NVarChar(50)")>  _
	Public Property Value() As String
		Get
			Return Me._Value
		End Get
		Set
			If (String.Equals(Me._Value, value) = false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Number", DbType:="Float")>  _
	Public Property Number() As System.Nullable(Of Double)
		Get
			Return Me._Number
		End Get
		Set
			If (Me._Number.Equals(value) = false) Then
				Me.OnNumberChanging(value)
				Me.SendPropertyChanging
				Me._Number = value
				Me.SendPropertyChanged("Number")
				Me.OnNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cData_ccYTD", Storage:="_ccYTD", ThisKey:="DataID", OtherKey:="DataID", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property ccYTD() As ccYTD
		Get
			Return Me._ccYTD.Entity
		End Get
		Set
			Dim previousValue As ccYTD = Me._ccYTD.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ccYTD.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ccYTD.Entity = Nothing
					previousValue.cData = Nothing
				End If
				Me._ccYTD.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.cData = Me
				End If
				Me.SendPropertyChanged("ccYTD")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cData_ccPYTD", Storage:="_ccPYTD", ThisKey:="DataID", OtherKey:="DataID", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property ccPYTD() As ccPYTD
		Get
			Return Me._ccPYTD.Entity
		End Get
		Set
			Dim previousValue As ccPYTD = Me._ccPYTD.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ccPYTD.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ccPYTD.Entity = Nothing
					previousValue.cData = Nothing
				End If
				Me._ccPYTD.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.cData = Me
				End If
				Me.SendPropertyChanged("ccPYTD")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cData_ccPCYA", Storage:="_ccPCYA", ThisKey:="DataID", OtherKey:="DataID", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property ccPCYA() As ccPCYA
		Get
			Return Me._ccPCYA.Entity
		End Get
		Set
			Dim previousValue As ccPCYA = Me._ccPCYA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ccPCYA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ccPCYA.Entity = Nothing
					previousValue.cData = Nothing
				End If
				Me._ccPCYA.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.cData = Me
				End If
				Me.SendPropertyChanged("ccPCYA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddcField_cData", Storage:="_ddcField", ThisKey:="FieldID", OtherKey:="FieldID", IsForeignKey:=true)>  _
	Public Property ddcField() As ddcField
		Get
			Return Me._ddcField.Entity
		End Get
		Set
			Dim previousValue As ddcField = Me._ddcField.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ddcField.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ddcField.Entity = Nothing
					previousValue.cDatas.Remove(Me)
				End If
				Me._ddcField.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cDatas.Add(Me)
					Me._FieldID = value.FieldID
				Else
					Me._FieldID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ddcField")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSurveySeries_cData", Storage:="_dSurveySeries", ThisKey:="SurveySeriesID", OtherKey:="SurveySeriesID", IsForeignKey:=true)>  _
	Public Property dSurveySeries() As dSurveySeries
		Get
			Return Me._dSurveySeries.Entity
		End Get
		Set
			Dim previousValue As dSurveySeries = Me._dSurveySeries.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._dSurveySeries.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._dSurveySeries.Entity = Nothing
					previousValue.cDatas.Remove(Me)
				End If
				Me._dSurveySeries.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cDatas.Add(Me)
					Me._SurveySeriesID = value.SurveySeriesID
				Else
					Me._SurveySeriesID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("dSurveySeries")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dWorkbook_cData", Storage:="_dWorkbook", ThisKey:="WorkbookID", OtherKey:="WorkbookID", IsForeignKey:=true)>  _
	Public Property dWorkbook() As dWorkbook
		Get
			Return Me._dWorkbook.Entity
		End Get
		Set
			Dim previousValue As dWorkbook = Me._dWorkbook.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._dWorkbook.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._dWorkbook.Entity = Nothing
					previousValue.cDatas.Remove(Me)
				End If
				Me._dWorkbook.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cDatas.Add(Me)
					Me._WorkbookID = value.WorkbookID
				Else
					Me._WorkbookID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("dWorkbook")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ddAlgorithms")>  _
Partial Public Class ddAlgorithm
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SurveyID As Integer
	
	Private _FieldID As Integer
	
	Private _Algorithm As String
	
	Private _Args As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSurveyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveyIDChanged()
    End Sub
    Partial Private Sub OnFieldIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFieldIDChanged()
    End Sub
    Partial Private Sub OnAlgorithmChanging(value As String)
    End Sub
    Partial Private Sub OnAlgorithmChanged()
    End Sub
    Partial Private Sub OnArgsChanging(value As String)
    End Sub
    Partial Private Sub OnArgsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyID", DbType:="Int NOT NULL")>  _
	Public Property SurveyID() As Integer
		Get
			Return Me._SurveyID
		End Get
		Set
			If ((Me._SurveyID = value)  _
						= false) Then
				Me.OnSurveyIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveyID = value
				Me.SendPropertyChanged("SurveyID")
				Me.OnSurveyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FieldID() As Integer
		Get
			Return Me._FieldID
		End Get
		Set
			If ((Me._FieldID = value)  _
						= false) Then
				Me.OnFieldIDChanging(value)
				Me.SendPropertyChanging
				Me._FieldID = value
				Me.SendPropertyChanged("FieldID")
				Me.OnFieldIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Algorithm", DbType:="NChar(18) NOT NULL", CanBeNull:=false)>  _
	Public Property Algorithm() As String
		Get
			Return Me._Algorithm
		End Get
		Set
			If (String.Equals(Me._Algorithm, value) = false) Then
				Me.OnAlgorithmChanging(value)
				Me.SendPropertyChanging
				Me._Algorithm = value
				Me.SendPropertyChanged("Algorithm")
				Me.OnAlgorithmChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Args", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Args() As String
		Get
			Return Me._Args
		End Get
		Set
			If (String.Equals(Me._Args, value) = false) Then
				Me.OnArgsChanging(value)
				Me.SendPropertyChanging
				Me._Args = value
				Me.SendPropertyChanged("Args")
				Me.OnArgsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ddAttributes")>  _
Partial Public Class ddAttribute
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SurveyID As Integer
	
	Private _FieldID As Integer
	
	Private _CodeSetID As Integer
	
	Private _CodeID As Integer
	
	Private _ddCodeSet As EntityRef(Of ddCodeSet)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSurveyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveyIDChanged()
    End Sub
    Partial Private Sub OnFieldIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFieldIDChanged()
    End Sub
    Partial Private Sub OnCodeSetIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCodeSetIDChanged()
    End Sub
    Partial Private Sub OnCodeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCodeIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ddCodeSet = CType(Nothing, EntityRef(Of ddCodeSet))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyID", DbType:="Int NOT NULL")>  _
	Public Property SurveyID() As Integer
		Get
			Return Me._SurveyID
		End Get
		Set
			If ((Me._SurveyID = value)  _
						= false) Then
				Me.OnSurveyIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveyID = value
				Me.SendPropertyChanged("SurveyID")
				Me.OnSurveyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FieldID() As Integer
		Get
			Return Me._FieldID
		End Get
		Set
			If ((Me._FieldID = value)  _
						= false) Then
				Me.OnFieldIDChanging(value)
				Me.SendPropertyChanging
				Me._FieldID = value
				Me.SendPropertyChanged("FieldID")
				Me.OnFieldIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodeSetID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CodeSetID() As Integer
		Get
			Return Me._CodeSetID
		End Get
		Set
			If ((Me._CodeSetID = value)  _
						= false) Then
				If Me._ddCodeSet.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCodeSetIDChanging(value)
				Me.SendPropertyChanging
				Me._CodeSetID = value
				Me.SendPropertyChanged("CodeSetID")
				Me.OnCodeSetIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodeID", DbType:="Int NOT NULL")>  _
	Public Property CodeID() As Integer
		Get
			Return Me._CodeID
		End Get
		Set
			If ((Me._CodeID = value)  _
						= false) Then
				Me.OnCodeIDChanging(value)
				Me.SendPropertyChanging
				Me._CodeID = value
				Me.SendPropertyChanged("CodeID")
				Me.OnCodeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddCodeSet_ddAttribute", Storage:="_ddCodeSet", ThisKey:="CodeSetID", OtherKey:="CodeSetID", IsForeignKey:=true)>  _
	Public Property ddCodeSet() As ddCodeSet
		Get
			Return Me._ddCodeSet.Entity
		End Get
		Set
			Dim previousValue As ddCodeSet = Me._ddCodeSet.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ddCodeSet.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ddCodeSet.Entity = Nothing
					previousValue.ddAttributes.Remove(Me)
				End If
				Me._ddCodeSet.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ddAttributes.Add(Me)
					Me._CodeSetID = value.CodeSetID
				Else
					Me._CodeSetID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ddCodeSet")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.dWorkbooks")>  _
Partial Public Class dWorkbook
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _WorkbookID As Integer
	
	Private _SurveySeriesID As Integer
	
	Private _SourceID As Integer
	
	Private _DateID As Date
	
	Private _WorkbookName As String
	
	Private _WorkbookStatus As System.Nullable(Of Char)
	
	Private _Responses As String
	
	Private _fDatas As EntitySet(Of fData)
	
	Private _cDatas As EntitySet(Of cData)
	
	Private _dSource As EntityRef(Of dSource)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnWorkbookIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnWorkbookIDChanged()
    End Sub
    Partial Private Sub OnSurveySeriesIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveySeriesIDChanged()
    End Sub
    Partial Private Sub OnSourceIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSourceIDChanged()
    End Sub
    Partial Private Sub OnDateIDChanging(value As Date)
    End Sub
    Partial Private Sub OnDateIDChanged()
    End Sub
    Partial Private Sub OnWorkbookNameChanging(value As String)
    End Sub
    Partial Private Sub OnWorkbookNameChanged()
    End Sub
    Partial Private Sub OnWorkbookStatusChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnWorkbookStatusChanged()
    End Sub
    Partial Private Sub OnResponsesChanging(value As String)
    End Sub
    Partial Private Sub OnResponsesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._fDatas = New EntitySet(Of fData)(AddressOf Me.attach_fDatas, AddressOf Me.detach_fDatas)
		Me._cDatas = New EntitySet(Of cData)(AddressOf Me.attach_cDatas, AddressOf Me.detach_cDatas)
		Me._dSource = CType(Nothing, EntityRef(Of dSource))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WorkbookID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property WorkbookID() As Integer
		Get
			Return Me._WorkbookID
		End Get
		Set
			If ((Me._WorkbookID = value)  _
						= false) Then
				Me.OnWorkbookIDChanging(value)
				Me.SendPropertyChanging
				Me._WorkbookID = value
				Me.SendPropertyChanged("WorkbookID")
				Me.OnWorkbookIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveySeriesID", DbType:="Int NOT NULL")>  _
	Public Property SurveySeriesID() As Integer
		Get
			Return Me._SurveySeriesID
		End Get
		Set
			If ((Me._SurveySeriesID = value)  _
						= false) Then
				Me.OnSurveySeriesIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveySeriesID = value
				Me.SendPropertyChanged("SurveySeriesID")
				Me.OnSurveySeriesIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceID", DbType:="Int NOT NULL")>  _
	Public Property SourceID() As Integer
		Get
			Return Me._SourceID
		End Get
		Set
			If ((Me._SourceID = value)  _
						= false) Then
				If Me._dSource.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSourceIDChanging(value)
				Me.SendPropertyChanging
				Me._SourceID = value
				Me.SendPropertyChanged("SourceID")
				Me.OnSourceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateID", DbType:="Date NOT NULL")>  _
	Public Property DateID() As Date
		Get
			Return Me._DateID
		End Get
		Set
			If ((Me._DateID = value)  _
						= false) Then
				Me.OnDateIDChanging(value)
				Me.SendPropertyChanging
				Me._DateID = value
				Me.SendPropertyChanged("DateID")
				Me.OnDateIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WorkbookName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property WorkbookName() As String
		Get
			Return Me._WorkbookName
		End Get
		Set
			If (String.Equals(Me._WorkbookName, value) = false) Then
				Me.OnWorkbookNameChanging(value)
				Me.SendPropertyChanging
				Me._WorkbookName = value
				Me.SendPropertyChanged("WorkbookName")
				Me.OnWorkbookNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WorkbookStatus", DbType:="Char(1)")>  _
	Public Property WorkbookStatus() As System.Nullable(Of Char)
		Get
			Return Me._WorkbookStatus
		End Get
		Set
			If (Me._WorkbookStatus.Equals(value) = false) Then
				Me.OnWorkbookStatusChanging(value)
				Me.SendPropertyChanging
				Me._WorkbookStatus = value
				Me.SendPropertyChanged("WorkbookStatus")
				Me.OnWorkbookStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Responses", DbType:="VarChar(MAX)")>  _
	Public Property Responses() As String
		Get
			Return Me._Responses
		End Get
		Set
			If (String.Equals(Me._Responses, value) = false) Then
				Me.OnResponsesChanging(value)
				Me.SendPropertyChanging
				Me._Responses = value
				Me.SendPropertyChanged("Responses")
				Me.OnResponsesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dWorkbook_fData", Storage:="_fDatas", ThisKey:="WorkbookID", OtherKey:="WorkbookID")>  _
	Public Property fDatas() As EntitySet(Of fData)
		Get
			Return Me._fDatas
		End Get
		Set
			Me._fDatas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dWorkbook_cData", Storage:="_cDatas", ThisKey:="WorkbookID", OtherKey:="WorkbookID")>  _
	Public Property cDatas() As EntitySet(Of cData)
		Get
			Return Me._cDatas
		End Get
		Set
			Me._cDatas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSource_dWorkbook", Storage:="_dSource", ThisKey:="SourceID", OtherKey:="SourceID", IsForeignKey:=true)>  _
	Public Property dSource() As dSource
		Get
			Return Me._dSource.Entity
		End Get
		Set
			Dim previousValue As dSource = Me._dSource.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._dSource.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._dSource.Entity = Nothing
					previousValue.dWorkbooks.Remove(Me)
				End If
				Me._dSource.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.dWorkbooks.Add(Me)
					Me._SourceID = value.SourceID
				Else
					Me._SourceID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("dSource")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_fDatas(ByVal entity As fData)
		Me.SendPropertyChanging
		entity.dWorkbook = Me
	End Sub
	
	Private Sub detach_fDatas(ByVal entity As fData)
		Me.SendPropertyChanging
		entity.dWorkbook = Nothing
	End Sub
	
	Private Sub attach_cDatas(ByVal entity As cData)
		Me.SendPropertyChanging
		entity.dWorkbook = Me
	End Sub
	
	Private Sub detach_cDatas(ByVal entity As cData)
		Me.SendPropertyChanging
		entity.dWorkbook = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.dSource")>  _
Partial Public Class dSource
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SourceID As Integer
	
	Private _SourceName As String
	
	Private _PrefName As String
	
	Private _OrganizationID As Integer
	
	Private _SurveyID As Integer
	
	Private _ParentID As System.Nullable(Of Integer)
	
	Private _GroupID As System.Nullable(Of Integer)
	
	Private _cPCYAs As EntitySet(Of cPCYA)
	
	Private _cPYTDs As EntitySet(Of cPYTD)
	
	Private _cYTDs As EntitySet(Of cYTD)
	
	Private _ccYTDs As EntitySet(Of ccYTD)
	
	Private _ccPYTDs As EntitySet(Of ccPYTD)
	
	Private _ccPCYAs As EntitySet(Of ccPCYA)
	
	Private _dWorkbooks As EntitySet(Of dWorkbook)
	
	Private _dOrgMaster As EntityRef(Of dOrgMaster)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSourceIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSourceIDChanged()
    End Sub
    Partial Private Sub OnSourceNameChanging(value As String)
    End Sub
    Partial Private Sub OnSourceNameChanged()
    End Sub
    Partial Private Sub OnPrefNameChanging(value As String)
    End Sub
    Partial Private Sub OnPrefNameChanged()
    End Sub
    Partial Private Sub OnOrganizationIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrganizationIDChanged()
    End Sub
    Partial Private Sub OnSurveyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveyIDChanged()
    End Sub
    Partial Private Sub OnParentIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnParentIDChanged()
    End Sub
    Partial Private Sub OnGroupIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnGroupIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._cPCYAs = New EntitySet(Of cPCYA)(AddressOf Me.attach_cPCYAs, AddressOf Me.detach_cPCYAs)
		Me._cPYTDs = New EntitySet(Of cPYTD)(AddressOf Me.attach_cPYTDs, AddressOf Me.detach_cPYTDs)
		Me._cYTDs = New EntitySet(Of cYTD)(AddressOf Me.attach_cYTDs, AddressOf Me.detach_cYTDs)
		Me._ccYTDs = New EntitySet(Of ccYTD)(AddressOf Me.attach_ccYTDs, AddressOf Me.detach_ccYTDs)
		Me._ccPYTDs = New EntitySet(Of ccPYTD)(AddressOf Me.attach_ccPYTDs, AddressOf Me.detach_ccPYTDs)
		Me._ccPCYAs = New EntitySet(Of ccPCYA)(AddressOf Me.attach_ccPCYAs, AddressOf Me.detach_ccPCYAs)
		Me._dWorkbooks = New EntitySet(Of dWorkbook)(AddressOf Me.attach_dWorkbooks, AddressOf Me.detach_dWorkbooks)
		Me._dOrgMaster = CType(Nothing, EntityRef(Of dOrgMaster))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SourceID() As Integer
		Get
			Return Me._SourceID
		End Get
		Set
			If ((Me._SourceID = value)  _
						= false) Then
				Me.OnSourceIDChanging(value)
				Me.SendPropertyChanging
				Me._SourceID = value
				Me.SendPropertyChanged("SourceID")
				Me.OnSourceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceName", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property SourceName() As String
		Get
			Return Me._SourceName
		End Get
		Set
			If (String.Equals(Me._SourceName, value) = false) Then
				Me.OnSourceNameChanging(value)
				Me.SendPropertyChanging
				Me._SourceName = value
				Me.SendPropertyChanged("SourceName")
				Me.OnSourceNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrefName", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property PrefName() As String
		Get
			Return Me._PrefName
		End Get
		Set
			If (String.Equals(Me._PrefName, value) = false) Then
				Me.OnPrefNameChanging(value)
				Me.SendPropertyChanging
				Me._PrefName = value
				Me.SendPropertyChanged("PrefName")
				Me.OnPrefNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrganizationID", DbType:="Int NOT NULL")>  _
	Public Property OrganizationID() As Integer
		Get
			Return Me._OrganizationID
		End Get
		Set
			If ((Me._OrganizationID = value)  _
						= false) Then
				If Me._dOrgMaster.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOrganizationIDChanging(value)
				Me.SendPropertyChanging
				Me._OrganizationID = value
				Me.SendPropertyChanged("OrganizationID")
				Me.OnOrganizationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyID", DbType:="Int NOT NULL")>  _
	Public Property SurveyID() As Integer
		Get
			Return Me._SurveyID
		End Get
		Set
			If ((Me._SurveyID = value)  _
						= false) Then
				Me.OnSurveyIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveyID = value
				Me.SendPropertyChanged("SurveyID")
				Me.OnSurveyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentID", DbType:="Int")>  _
	Public Property ParentID() As System.Nullable(Of Integer)
		Get
			Return Me._ParentID
		End Get
		Set
			If (Me._ParentID.Equals(value) = false) Then
				Me.OnParentIDChanging(value)
				Me.SendPropertyChanging
				Me._ParentID = value
				Me.SendPropertyChanged("ParentID")
				Me.OnParentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupID", DbType:="Int")>  _
	Public Property GroupID() As System.Nullable(Of Integer)
		Get
			Return Me._GroupID
		End Get
		Set
			If (Me._GroupID.Equals(value) = false) Then
				Me.OnGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._GroupID = value
				Me.SendPropertyChanged("GroupID")
				Me.OnGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSource_cPCYA", Storage:="_cPCYAs", ThisKey:="SourceID", OtherKey:="SourceID")>  _
	Public Property cPCYAs() As EntitySet(Of cPCYA)
		Get
			Return Me._cPCYAs
		End Get
		Set
			Me._cPCYAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSource_cPYTD", Storage:="_cPYTDs", ThisKey:="SourceID", OtherKey:="SourceID")>  _
	Public Property cPYTDs() As EntitySet(Of cPYTD)
		Get
			Return Me._cPYTDs
		End Get
		Set
			Me._cPYTDs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSource_cYTD", Storage:="_cYTDs", ThisKey:="SourceID", OtherKey:="SourceID")>  _
	Public Property cYTDs() As EntitySet(Of cYTD)
		Get
			Return Me._cYTDs
		End Get
		Set
			Me._cYTDs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSource_ccYTD", Storage:="_ccYTDs", ThisKey:="SourceID", OtherKey:="SourceID")>  _
	Public Property ccYTDs() As EntitySet(Of ccYTD)
		Get
			Return Me._ccYTDs
		End Get
		Set
			Me._ccYTDs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSource_ccPYTD", Storage:="_ccPYTDs", ThisKey:="SourceID", OtherKey:="SourceID")>  _
	Public Property ccPYTDs() As EntitySet(Of ccPYTD)
		Get
			Return Me._ccPYTDs
		End Get
		Set
			Me._ccPYTDs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSource_ccPCYA", Storage:="_ccPCYAs", ThisKey:="SourceID", OtherKey:="SourceID")>  _
	Public Property ccPCYAs() As EntitySet(Of ccPCYA)
		Get
			Return Me._ccPCYAs
		End Get
		Set
			Me._ccPCYAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSource_dWorkbook", Storage:="_dWorkbooks", ThisKey:="SourceID", OtherKey:="SourceID")>  _
	Public Property dWorkbooks() As EntitySet(Of dWorkbook)
		Get
			Return Me._dWorkbooks
		End Get
		Set
			Me._dWorkbooks.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dOrgMaster_dSource", Storage:="_dOrgMaster", ThisKey:="OrganizationID", OtherKey:="OrganizationID", IsForeignKey:=true)>  _
	Public Property dOrgMaster() As dOrgMaster
		Get
			Return Me._dOrgMaster.Entity
		End Get
		Set
			Dim previousValue As dOrgMaster = Me._dOrgMaster.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._dOrgMaster.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._dOrgMaster.Entity = Nothing
					previousValue.dSources.Remove(Me)
				End If
				Me._dOrgMaster.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.dSources.Add(Me)
					Me._OrganizationID = value.OrganizationID
				Else
					Me._OrganizationID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("dOrgMaster")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_cPCYAs(ByVal entity As cPCYA)
		Me.SendPropertyChanging
		entity.dSource = Me
	End Sub
	
	Private Sub detach_cPCYAs(ByVal entity As cPCYA)
		Me.SendPropertyChanging
		entity.dSource = Nothing
	End Sub
	
	Private Sub attach_cPYTDs(ByVal entity As cPYTD)
		Me.SendPropertyChanging
		entity.dSource = Me
	End Sub
	
	Private Sub detach_cPYTDs(ByVal entity As cPYTD)
		Me.SendPropertyChanging
		entity.dSource = Nothing
	End Sub
	
	Private Sub attach_cYTDs(ByVal entity As cYTD)
		Me.SendPropertyChanging
		entity.dSource = Me
	End Sub
	
	Private Sub detach_cYTDs(ByVal entity As cYTD)
		Me.SendPropertyChanging
		entity.dSource = Nothing
	End Sub
	
	Private Sub attach_ccYTDs(ByVal entity As ccYTD)
		Me.SendPropertyChanging
		entity.dSource = Me
	End Sub
	
	Private Sub detach_ccYTDs(ByVal entity As ccYTD)
		Me.SendPropertyChanging
		entity.dSource = Nothing
	End Sub
	
	Private Sub attach_ccPYTDs(ByVal entity As ccPYTD)
		Me.SendPropertyChanging
		entity.dSource = Me
	End Sub
	
	Private Sub detach_ccPYTDs(ByVal entity As ccPYTD)
		Me.SendPropertyChanging
		entity.dSource = Nothing
	End Sub
	
	Private Sub attach_ccPCYAs(ByVal entity As ccPCYA)
		Me.SendPropertyChanging
		entity.dSource = Me
	End Sub
	
	Private Sub detach_ccPCYAs(ByVal entity As ccPCYA)
		Me.SendPropertyChanging
		entity.dSource = Nothing
	End Sub
	
	Private Sub attach_dWorkbooks(ByVal entity As dWorkbook)
		Me.SendPropertyChanging
		entity.dSource = Me
	End Sub
	
	Private Sub detach_dWorkbooks(ByVal entity As dWorkbook)
		Me.SendPropertyChanging
		entity.dSource = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.dSurveys")>  _
Partial Public Class dSurvey
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SurveyID As Integer
	
	Private _SurveyName As String
	
	Private _SurveyFrequency As System.Nullable(Of Char)
	
	Private _SurveyDescription As String
	
	Private _FolderPath As String
	
	Private _SurveyHomePage As String
	
	Private _admUserSurveys As EntitySet(Of admUserSurvey)
	
	Private _fPages As EntitySet(Of fPage)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSurveyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveyIDChanged()
    End Sub
    Partial Private Sub OnSurveyNameChanging(value As String)
    End Sub
    Partial Private Sub OnSurveyNameChanged()
    End Sub
    Partial Private Sub OnSurveyFrequencyChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnSurveyFrequencyChanged()
    End Sub
    Partial Private Sub OnSurveyDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnSurveyDescriptionChanged()
    End Sub
    Partial Private Sub OnFolderPathChanging(value As String)
    End Sub
    Partial Private Sub OnFolderPathChanged()
    End Sub
    Partial Private Sub OnSurveyHomePageChanging(value As String)
    End Sub
    Partial Private Sub OnSurveyHomePageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._admUserSurveys = New EntitySet(Of admUserSurvey)(AddressOf Me.attach_admUserSurveys, AddressOf Me.detach_admUserSurveys)
		Me._fPages = New EntitySet(Of fPage)(AddressOf Me.attach_fPages, AddressOf Me.detach_fPages)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SurveyID() As Integer
		Get
			Return Me._SurveyID
		End Get
		Set
			If ((Me._SurveyID = value)  _
						= false) Then
				Me.OnSurveyIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveyID = value
				Me.SendPropertyChanged("SurveyID")
				Me.OnSurveyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyName", DbType:="NVarChar(100)")>  _
	Public Property SurveyName() As String
		Get
			Return Me._SurveyName
		End Get
		Set
			If (String.Equals(Me._SurveyName, value) = false) Then
				Me.OnSurveyNameChanging(value)
				Me.SendPropertyChanging
				Me._SurveyName = value
				Me.SendPropertyChanged("SurveyName")
				Me.OnSurveyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyFrequency", DbType:="Char(1)")>  _
	Public Property SurveyFrequency() As System.Nullable(Of Char)
		Get
			Return Me._SurveyFrequency
		End Get
		Set
			If (Me._SurveyFrequency.Equals(value) = false) Then
				Me.OnSurveyFrequencyChanging(value)
				Me.SendPropertyChanging
				Me._SurveyFrequency = value
				Me.SendPropertyChanged("SurveyFrequency")
				Me.OnSurveyFrequencyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyDescription", DbType:="NVarChar(200)")>  _
	Public Property SurveyDescription() As String
		Get
			Return Me._SurveyDescription
		End Get
		Set
			If (String.Equals(Me._SurveyDescription, value) = false) Then
				Me.OnSurveyDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._SurveyDescription = value
				Me.SendPropertyChanged("SurveyDescription")
				Me.OnSurveyDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FolderPath", DbType:="NVarChar(150)")>  _
	Public Property FolderPath() As String
		Get
			Return Me._FolderPath
		End Get
		Set
			If (String.Equals(Me._FolderPath, value) = false) Then
				Me.OnFolderPathChanging(value)
				Me.SendPropertyChanging
				Me._FolderPath = value
				Me.SendPropertyChanged("FolderPath")
				Me.OnFolderPathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyHomePage", DbType:="NVarChar(50)")>  _
	Public Property SurveyHomePage() As String
		Get
			Return Me._SurveyHomePage
		End Get
		Set
			If (String.Equals(Me._SurveyHomePage, value) = false) Then
				Me.OnSurveyHomePageChanging(value)
				Me.SendPropertyChanging
				Me._SurveyHomePage = value
				Me.SendPropertyChanged("SurveyHomePage")
				Me.OnSurveyHomePageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSurvey_admUserSurvey", Storage:="_admUserSurveys", ThisKey:="SurveyID", OtherKey:="SurveyID")>  _
	Public Property admUserSurveys() As EntitySet(Of admUserSurvey)
		Get
			Return Me._admUserSurveys
		End Get
		Set
			Me._admUserSurveys.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSurvey_fPage", Storage:="_fPages", ThisKey:="SurveyID", OtherKey:="SurveyID")>  _
	Public Property fPages() As EntitySet(Of fPage)
		Get
			Return Me._fPages
		End Get
		Set
			Me._fPages.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_admUserSurveys(ByVal entity As admUserSurvey)
		Me.SendPropertyChanging
		entity.dSurvey = Me
	End Sub
	
	Private Sub detach_admUserSurveys(ByVal entity As admUserSurvey)
		Me.SendPropertyChanging
		entity.dSurvey = Nothing
	End Sub
	
	Private Sub attach_fPages(ByVal entity As fPage)
		Me.SendPropertyChanging
		entity.dSurvey = Me
	End Sub
	
	Private Sub detach_fPages(ByVal entity As fPage)
		Me.SendPropertyChanging
		entity.dSurvey = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.fPages")>  _
Partial Public Class fPage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SurveyID As Integer
	
	Private _PageNumber As Integer
	
	Private _PageDescription As String
	
	Private _fLayouts As EntitySet(Of fLayout)
	
	Private _dSurvey As EntityRef(Of dSurvey)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSurveyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveyIDChanged()
    End Sub
    Partial Private Sub OnPageNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnPageNumberChanged()
    End Sub
    Partial Private Sub OnPageDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnPageDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._fLayouts = New EntitySet(Of fLayout)(AddressOf Me.attach_fLayouts, AddressOf Me.detach_fLayouts)
		Me._dSurvey = CType(Nothing, EntityRef(Of dSurvey))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SurveyID() As Integer
		Get
			Return Me._SurveyID
		End Get
		Set
			If ((Me._SurveyID = value)  _
						= false) Then
				If Me._dSurvey.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSurveyIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveyID = value
				Me.SendPropertyChanged("SurveyID")
				Me.OnSurveyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageNumber", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property PageNumber() As Integer
		Get
			Return Me._PageNumber
		End Get
		Set
			If ((Me._PageNumber = value)  _
						= false) Then
				Me.OnPageNumberChanging(value)
				Me.SendPropertyChanging
				Me._PageNumber = value
				Me.SendPropertyChanged("PageNumber")
				Me.OnPageNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageDescription", DbType:="NVarChar(200)")>  _
	Public Property PageDescription() As String
		Get
			Return Me._PageDescription
		End Get
		Set
			If (String.Equals(Me._PageDescription, value) = false) Then
				Me.OnPageDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._PageDescription = value
				Me.SendPropertyChanged("PageDescription")
				Me.OnPageDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="fPage_fLayout", Storage:="_fLayouts", ThisKey:="SurveyID,PageNumber", OtherKey:="SurveyID,PageNumber")>  _
	Public Property fLayouts() As EntitySet(Of fLayout)
		Get
			Return Me._fLayouts
		End Get
		Set
			Me._fLayouts.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dSurvey_fPage", Storage:="_dSurvey", ThisKey:="SurveyID", OtherKey:="SurveyID", IsForeignKey:=true)>  _
	Public Property dSurvey() As dSurvey
		Get
			Return Me._dSurvey.Entity
		End Get
		Set
			Dim previousValue As dSurvey = Me._dSurvey.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._dSurvey.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._dSurvey.Entity = Nothing
					previousValue.fPages.Remove(Me)
				End If
				Me._dSurvey.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.fPages.Add(Me)
					Me._SurveyID = value.SurveyID
				Else
					Me._SurveyID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("dSurvey")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_fLayouts(ByVal entity As fLayout)
		Me.SendPropertyChanging
		entity.fPage = Me
	End Sub
	
	Private Sub detach_fLayouts(ByVal entity As fLayout)
		Me.SendPropertyChanging
		entity.fPage = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.fRows")>  _
Partial Public Class fRow
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SurveyID As Integer
	
	Private _RowNumber As Integer
	
	Private _RowDescription As String
	
	Private _PageNumber As Integer
	
	Private _SectionNumber As Integer
	
	Private _fLayouts As EntitySet(Of fLayout)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSurveyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveyIDChanged()
    End Sub
    Partial Private Sub OnRowNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnRowNumberChanged()
    End Sub
    Partial Private Sub OnRowDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnRowDescriptionChanged()
    End Sub
    Partial Private Sub OnPageNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnPageNumberChanged()
    End Sub
    Partial Private Sub OnSectionNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnSectionNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._fLayouts = New EntitySet(Of fLayout)(AddressOf Me.attach_fLayouts, AddressOf Me.detach_fLayouts)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SurveyID() As Integer
		Get
			Return Me._SurveyID
		End Get
		Set
			If ((Me._SurveyID = value)  _
						= false) Then
				Me.OnSurveyIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveyID = value
				Me.SendPropertyChanged("SurveyID")
				Me.OnSurveyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RowNumber", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RowNumber() As Integer
		Get
			Return Me._RowNumber
		End Get
		Set
			If ((Me._RowNumber = value)  _
						= false) Then
				Me.OnRowNumberChanging(value)
				Me.SendPropertyChanging
				Me._RowNumber = value
				Me.SendPropertyChanged("RowNumber")
				Me.OnRowNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RowDescription", DbType:="NVarChar(200)")>  _
	Public Property RowDescription() As String
		Get
			Return Me._RowDescription
		End Get
		Set
			If (String.Equals(Me._RowDescription, value) = false) Then
				Me.OnRowDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._RowDescription = value
				Me.SendPropertyChanged("RowDescription")
				Me.OnRowDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageNumber", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property PageNumber() As Integer
		Get
			Return Me._PageNumber
		End Get
		Set
			If ((Me._PageNumber = value)  _
						= false) Then
				Me.OnPageNumberChanging(value)
				Me.SendPropertyChanging
				Me._PageNumber = value
				Me.SendPropertyChanged("PageNumber")
				Me.OnPageNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SectionNumber", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SectionNumber() As Integer
		Get
			Return Me._SectionNumber
		End Get
		Set
			If ((Me._SectionNumber = value)  _
						= false) Then
				Me.OnSectionNumberChanging(value)
				Me.SendPropertyChanging
				Me._SectionNumber = value
				Me.SendPropertyChanged("SectionNumber")
				Me.OnSectionNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="fRow_fLayout", Storage:="_fLayouts", ThisKey:="SurveyID,RowNumber,PageNumber,SectionNumber", OtherKey:="SurveyID,RowNumber,PageNumber,SectionNumber")>  _
	Public Property fLayouts() As EntitySet(Of fLayout)
		Get
			Return Me._fLayouts
		End Get
		Set
			Me._fLayouts.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_fLayouts(ByVal entity As fLayout)
		Me.SendPropertyChanging
		entity.fRow = Me
	End Sub
	
	Private Sub detach_fLayouts(ByVal entity As fLayout)
		Me.SendPropertyChanging
		entity.fRow = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.fSections")>  _
Partial Public Class fSection
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SurveyID As Integer
	
	Private _SectionNumber As Integer
	
	Private _SectionDescription As String
	
	Private _PageNumber As Integer
	
	Private _fLayouts As EntitySet(Of fLayout)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSurveyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveyIDChanged()
    End Sub
    Partial Private Sub OnSectionNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnSectionNumberChanged()
    End Sub
    Partial Private Sub OnSectionDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnSectionDescriptionChanged()
    End Sub
    Partial Private Sub OnPageNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnPageNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._fLayouts = New EntitySet(Of fLayout)(AddressOf Me.attach_fLayouts, AddressOf Me.detach_fLayouts)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SurveyID() As Integer
		Get
			Return Me._SurveyID
		End Get
		Set
			If ((Me._SurveyID = value)  _
						= false) Then
				Me.OnSurveyIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveyID = value
				Me.SendPropertyChanged("SurveyID")
				Me.OnSurveyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SectionNumber", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SectionNumber() As Integer
		Get
			Return Me._SectionNumber
		End Get
		Set
			If ((Me._SectionNumber = value)  _
						= false) Then
				Me.OnSectionNumberChanging(value)
				Me.SendPropertyChanging
				Me._SectionNumber = value
				Me.SendPropertyChanged("SectionNumber")
				Me.OnSectionNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SectionDescription", DbType:="NVarChar(200)")>  _
	Public Property SectionDescription() As String
		Get
			Return Me._SectionDescription
		End Get
		Set
			If (String.Equals(Me._SectionDescription, value) = false) Then
				Me.OnSectionDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._SectionDescription = value
				Me.SendPropertyChanged("SectionDescription")
				Me.OnSectionDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageNumber", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property PageNumber() As Integer
		Get
			Return Me._PageNumber
		End Get
		Set
			If ((Me._PageNumber = value)  _
						= false) Then
				Me.OnPageNumberChanging(value)
				Me.SendPropertyChanging
				Me._PageNumber = value
				Me.SendPropertyChanged("PageNumber")
				Me.OnPageNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="fSection_fLayout", Storage:="_fLayouts", ThisKey:="SurveyID,SectionNumber,PageNumber", OtherKey:="SurveyID,SectionNumber,PageNumber")>  _
	Public Property fLayouts() As EntitySet(Of fLayout)
		Get
			Return Me._fLayouts
		End Get
		Set
			Me._fLayouts.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_fLayouts(ByVal entity As fLayout)
		Me.SendPropertyChanging
		entity.fSection = Me
	End Sub
	
	Private Sub detach_fLayouts(ByVal entity As fLayout)
		Me.SendPropertyChanging
		entity.fSection = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.fColumns")>  _
Partial Public Class fColumn
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SurveyID As Integer
	
	Private _ColumnNumber As Integer
	
	Private _ColumnDescription As String
	
	Private _PageNumber As Integer
	
	Private _SectionNumber As Integer
	
	Private _fLayouts As EntitySet(Of fLayout)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSurveyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveyIDChanged()
    End Sub
    Partial Private Sub OnColumnNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnColumnNumberChanged()
    End Sub
    Partial Private Sub OnColumnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnColumnDescriptionChanged()
    End Sub
    Partial Private Sub OnPageNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnPageNumberChanged()
    End Sub
    Partial Private Sub OnSectionNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnSectionNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._fLayouts = New EntitySet(Of fLayout)(AddressOf Me.attach_fLayouts, AddressOf Me.detach_fLayouts)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SurveyID() As Integer
		Get
			Return Me._SurveyID
		End Get
		Set
			If ((Me._SurveyID = value)  _
						= false) Then
				Me.OnSurveyIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveyID = value
				Me.SendPropertyChanged("SurveyID")
				Me.OnSurveyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ColumnNumber", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ColumnNumber() As Integer
		Get
			Return Me._ColumnNumber
		End Get
		Set
			If ((Me._ColumnNumber = value)  _
						= false) Then
				Me.OnColumnNumberChanging(value)
				Me.SendPropertyChanging
				Me._ColumnNumber = value
				Me.SendPropertyChanged("ColumnNumber")
				Me.OnColumnNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ColumnDescription", DbType:="NVarChar(200)")>  _
	Public Property ColumnDescription() As String
		Get
			Return Me._ColumnDescription
		End Get
		Set
			If (String.Equals(Me._ColumnDescription, value) = false) Then
				Me.OnColumnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ColumnDescription = value
				Me.SendPropertyChanged("ColumnDescription")
				Me.OnColumnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageNumber", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property PageNumber() As Integer
		Get
			Return Me._PageNumber
		End Get
		Set
			If ((Me._PageNumber = value)  _
						= false) Then
				Me.OnPageNumberChanging(value)
				Me.SendPropertyChanging
				Me._PageNumber = value
				Me.SendPropertyChanged("PageNumber")
				Me.OnPageNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SectionNumber", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SectionNumber() As Integer
		Get
			Return Me._SectionNumber
		End Get
		Set
			If ((Me._SectionNumber = value)  _
						= false) Then
				Me.OnSectionNumberChanging(value)
				Me.SendPropertyChanging
				Me._SectionNumber = value
				Me.SendPropertyChanged("SectionNumber")
				Me.OnSectionNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="fColumn_fLayout", Storage:="_fLayouts", ThisKey:="SurveyID,ColumnNumber,PageNumber,SectionNumber", OtherKey:="SurveyID,ColumnNumber,PageNumber,SectionNumber")>  _
	Public Property fLayouts() As EntitySet(Of fLayout)
		Get
			Return Me._fLayouts
		End Get
		Set
			Me._fLayouts.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_fLayouts(ByVal entity As fLayout)
		Me.SendPropertyChanging
		entity.fColumn = Me
	End Sub
	
	Private Sub detach_fLayouts(ByVal entity As fLayout)
		Me.SendPropertyChanging
		entity.fColumn = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.fLayout")>  _
Partial Public Class fLayout
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FieldID As Integer
	
	Private _SurveyID As Integer
	
	Private _PageNumber As Integer
	
	Private _SectionNumber As Integer
	
	Private _RowNumber As Integer
	
	Private _ColumnNumber As Integer
	
	Private _DataTypeID As Integer
	
	Private _Inactive As System.Nullable(Of Date)
	
	Private _ddDataType As EntityRef(Of ddDataType)
	
	Private _ddField As EntityRef(Of ddField)
	
	Private _fColumn As EntityRef(Of fColumn)
	
	Private _fPage As EntityRef(Of fPage)
	
	Private _fRow As EntityRef(Of fRow)
	
	Private _fSection As EntityRef(Of fSection)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFieldIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFieldIDChanged()
    End Sub
    Partial Private Sub OnSurveyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveyIDChanged()
    End Sub
    Partial Private Sub OnPageNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnPageNumberChanged()
    End Sub
    Partial Private Sub OnSectionNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnSectionNumberChanged()
    End Sub
    Partial Private Sub OnRowNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnRowNumberChanged()
    End Sub
    Partial Private Sub OnColumnNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnColumnNumberChanged()
    End Sub
    Partial Private Sub OnDataTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDataTypeIDChanged()
    End Sub
    Partial Private Sub OnInactiveChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnInactiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ddDataType = CType(Nothing, EntityRef(Of ddDataType))
		Me._ddField = CType(Nothing, EntityRef(Of ddField))
		Me._fColumn = CType(Nothing, EntityRef(Of fColumn))
		Me._fPage = CType(Nothing, EntityRef(Of fPage))
		Me._fRow = CType(Nothing, EntityRef(Of fRow))
		Me._fSection = CType(Nothing, EntityRef(Of fSection))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FieldID() As Integer
		Get
			Return Me._FieldID
		End Get
		Set
			If ((Me._FieldID = value)  _
						= false) Then
				If Me._ddField.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFieldIDChanging(value)
				Me.SendPropertyChanging
				Me._FieldID = value
				Me.SendPropertyChanged("FieldID")
				Me.OnFieldIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyID", DbType:="Int NOT NULL")>  _
	Public Property SurveyID() As Integer
		Get
			Return Me._SurveyID
		End Get
		Set
			If ((Me._SurveyID = value)  _
						= false) Then
				If (((Me._fColumn.HasLoadedOrAssignedValue OrElse Me._fPage.HasLoadedOrAssignedValue)  _
							OrElse Me._fRow.HasLoadedOrAssignedValue)  _
							OrElse Me._fSection.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSurveyIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveyID = value
				Me.SendPropertyChanged("SurveyID")
				Me.OnSurveyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageNumber", DbType:="Int NOT NULL")>  _
	Public Property PageNumber() As Integer
		Get
			Return Me._PageNumber
		End Get
		Set
			If ((Me._PageNumber = value)  _
						= false) Then
				If (((Me._fColumn.HasLoadedOrAssignedValue OrElse Me._fPage.HasLoadedOrAssignedValue)  _
							OrElse Me._fRow.HasLoadedOrAssignedValue)  _
							OrElse Me._fSection.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPageNumberChanging(value)
				Me.SendPropertyChanging
				Me._PageNumber = value
				Me.SendPropertyChanged("PageNumber")
				Me.OnPageNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SectionNumber", DbType:="Int NOT NULL")>  _
	Public Property SectionNumber() As Integer
		Get
			Return Me._SectionNumber
		End Get
		Set
			If ((Me._SectionNumber = value)  _
						= false) Then
				If ((Me._fColumn.HasLoadedOrAssignedValue OrElse Me._fRow.HasLoadedOrAssignedValue)  _
							OrElse Me._fSection.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSectionNumberChanging(value)
				Me.SendPropertyChanging
				Me._SectionNumber = value
				Me.SendPropertyChanged("SectionNumber")
				Me.OnSectionNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RowNumber", DbType:="Int NOT NULL")>  _
	Public Property RowNumber() As Integer
		Get
			Return Me._RowNumber
		End Get
		Set
			If ((Me._RowNumber = value)  _
						= false) Then
				If Me._fRow.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRowNumberChanging(value)
				Me.SendPropertyChanging
				Me._RowNumber = value
				Me.SendPropertyChanged("RowNumber")
				Me.OnRowNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ColumnNumber", DbType:="Int NOT NULL")>  _
	Public Property ColumnNumber() As Integer
		Get
			Return Me._ColumnNumber
		End Get
		Set
			If ((Me._ColumnNumber = value)  _
						= false) Then
				If Me._fColumn.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnColumnNumberChanging(value)
				Me.SendPropertyChanging
				Me._ColumnNumber = value
				Me.SendPropertyChanged("ColumnNumber")
				Me.OnColumnNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataTypeID", DbType:="Int NOT NULL")>  _
	Public Property DataTypeID() As Integer
		Get
			Return Me._DataTypeID
		End Get
		Set
			If ((Me._DataTypeID = value)  _
						= false) Then
				If Me._ddDataType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDataTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._DataTypeID = value
				Me.SendPropertyChanged("DataTypeID")
				Me.OnDataTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inactive", DbType:="DateTime")>  _
	Public Property Inactive() As System.Nullable(Of Date)
		Get
			Return Me._Inactive
		End Get
		Set
			If (Me._Inactive.Equals(value) = false) Then
				Me.OnInactiveChanging(value)
				Me.SendPropertyChanging
				Me._Inactive = value
				Me.SendPropertyChanged("Inactive")
				Me.OnInactiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddDataType_fLayout", Storage:="_ddDataType", ThisKey:="DataTypeID", OtherKey:="DataTypeID", IsForeignKey:=true)>  _
	Public Property ddDataType() As ddDataType
		Get
			Return Me._ddDataType.Entity
		End Get
		Set
			Dim previousValue As ddDataType = Me._ddDataType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ddDataType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ddDataType.Entity = Nothing
					previousValue.fLayouts.Remove(Me)
				End If
				Me._ddDataType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.fLayouts.Add(Me)
					Me._DataTypeID = value.DataTypeID
				Else
					Me._DataTypeID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ddDataType")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ddField_fLayout", Storage:="_ddField", ThisKey:="FieldID", OtherKey:="FieldID", IsForeignKey:=true)>  _
	Public Property ddField() As ddField
		Get
			Return Me._ddField.Entity
		End Get
		Set
			Dim previousValue As ddField = Me._ddField.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ddField.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ddField.Entity = Nothing
					previousValue.fLayout = Nothing
				End If
				Me._ddField.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.fLayout = Me
					Me._FieldID = value.FieldID
				Else
					Me._FieldID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ddField")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="fColumn_fLayout", Storage:="_fColumn", ThisKey:="SurveyID,ColumnNumber,PageNumber,SectionNumber", OtherKey:="SurveyID,ColumnNumber,PageNumber,SectionNumber", IsForeignKey:=true)>  _
	Public Property fColumn() As fColumn
		Get
			Return Me._fColumn.Entity
		End Get
		Set
			Dim previousValue As fColumn = Me._fColumn.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._fColumn.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._fColumn.Entity = Nothing
					previousValue.fLayouts.Remove(Me)
				End If
				Me._fColumn.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.fLayouts.Add(Me)
					Me._SurveyID = value.SurveyID
					Me._ColumnNumber = value.ColumnNumber
					Me._PageNumber = value.PageNumber
					Me._SectionNumber = value.SectionNumber
				Else
					Me._SurveyID = CType(Nothing, Integer)
					Me._ColumnNumber = CType(Nothing, Integer)
					Me._PageNumber = CType(Nothing, Integer)
					Me._SectionNumber = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("fColumn")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="fPage_fLayout", Storage:="_fPage", ThisKey:="SurveyID,PageNumber", OtherKey:="SurveyID,PageNumber", IsForeignKey:=true)>  _
	Public Property fPage() As fPage
		Get
			Return Me._fPage.Entity
		End Get
		Set
			Dim previousValue As fPage = Me._fPage.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._fPage.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._fPage.Entity = Nothing
					previousValue.fLayouts.Remove(Me)
				End If
				Me._fPage.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.fLayouts.Add(Me)
					Me._SurveyID = value.SurveyID
					Me._PageNumber = value.PageNumber
				Else
					Me._SurveyID = CType(Nothing, Integer)
					Me._PageNumber = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("fPage")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="fRow_fLayout", Storage:="_fRow", ThisKey:="SurveyID,RowNumber,PageNumber,SectionNumber", OtherKey:="SurveyID,RowNumber,PageNumber,SectionNumber", IsForeignKey:=true)>  _
	Public Property fRow() As fRow
		Get
			Return Me._fRow.Entity
		End Get
		Set
			Dim previousValue As fRow = Me._fRow.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._fRow.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._fRow.Entity = Nothing
					previousValue.fLayouts.Remove(Me)
				End If
				Me._fRow.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.fLayouts.Add(Me)
					Me._SurveyID = value.SurveyID
					Me._RowNumber = value.RowNumber
					Me._PageNumber = value.PageNumber
					Me._SectionNumber = value.SectionNumber
				Else
					Me._SurveyID = CType(Nothing, Integer)
					Me._RowNumber = CType(Nothing, Integer)
					Me._PageNumber = CType(Nothing, Integer)
					Me._SectionNumber = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("fRow")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="fSection_fLayout", Storage:="_fSection", ThisKey:="SurveyID,SectionNumber,PageNumber", OtherKey:="SurveyID,SectionNumber,PageNumber", IsForeignKey:=true)>  _
	Public Property fSection() As fSection
		Get
			Return Me._fSection.Entity
		End Get
		Set
			Dim previousValue As fSection = Me._fSection.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._fSection.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._fSection.Entity = Nothing
					previousValue.fLayouts.Remove(Me)
				End If
				Me._fSection.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.fLayouts.Add(Me)
					Me._SurveyID = value.SurveyID
					Me._SectionNumber = value.SectionNumber
					Me._PageNumber = value.PageNumber
				Else
					Me._SurveyID = CType(Nothing, Integer)
					Me._SectionNumber = CType(Nothing, Integer)
					Me._PageNumber = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("fSection")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ImportDetail")>  _
Partial Public Class ImportDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _WorkbookName As String
	
	Private _ImportResult As String
	
	Private _ImportDate As System.Nullable(Of Date)
	
	Private _SurveyId As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnWorkbookNameChanging(value As String)
    End Sub
    Partial Private Sub OnWorkbookNameChanged()
    End Sub
    Partial Private Sub OnImportResultChanging(value As String)
    End Sub
    Partial Private Sub OnImportResultChanged()
    End Sub
    Partial Private Sub OnImportDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnImportDateChanged()
    End Sub
    Partial Private Sub OnSurveyIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSurveyIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WorkbookName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property WorkbookName() As String
		Get
			Return Me._WorkbookName
		End Get
		Set
			If (String.Equals(Me._WorkbookName, value) = false) Then
				Me.OnWorkbookNameChanging(value)
				Me.SendPropertyChanging
				Me._WorkbookName = value
				Me.SendPropertyChanged("WorkbookName")
				Me.OnWorkbookNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImportResult", DbType:="NVarChar(MAX)")>  _
	Public Property ImportResult() As String
		Get
			Return Me._ImportResult
		End Get
		Set
			If (String.Equals(Me._ImportResult, value) = false) Then
				Me.OnImportResultChanging(value)
				Me.SendPropertyChanging
				Me._ImportResult = value
				Me.SendPropertyChanged("ImportResult")
				Me.OnImportResultChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImportDate", DbType:="DateTime")>  _
	Public Property ImportDate() As System.Nullable(Of Date)
		Get
			Return Me._ImportDate
		End Get
		Set
			If (Me._ImportDate.Equals(value) = false) Then
				Me.OnImportDateChanging(value)
				Me.SendPropertyChanging
				Me._ImportDate = value
				Me.SendPropertyChanged("ImportDate")
				Me.OnImportDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyId", DbType:="Int")>  _
	Public Property SurveyId() As System.Nullable(Of Integer)
		Get
			Return Me._SurveyId
		End Get
		Set
			If (Me._SurveyId.Equals(value) = false) Then
				Me.OnSurveyIdChanging(value)
				Me.SendPropertyChanging
				Me._SurveyId = value
				Me.SendPropertyChanged("SurveyId")
				Me.OnSurveyIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
